
L476_ats_blink-master.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001238  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  080013c0  080013c0  000113c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001400  08001400  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  08001400  08001400  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001400  08001400  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001400  08001400  00011400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001404  08001404  00011404  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  08001408  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000028  20000004  0800140c  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000002c  0800140c  0002002c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .debug_info   00002d21  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000793  00000000  00000000  00022d55  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000348  00000000  00000000  000234e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000002f0  00000000  00000000  00023830  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001ea05  00000000  00000000  00023b20  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000212a  00000000  00000000  00042525  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000aaee5  00000000  00000000  0004464f  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000ef534  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000c3c  00000000  00000000  000ef5b0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000004 	.word	0x20000004
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080013a8 	.word	0x080013a8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000008 	.word	0x20000008
 80001c4:	080013a8 	.word	0x080013a8

080001c8 <LL_AHB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80001c8:	b480      	push	{r7}
 80001ca:	b085      	sub	sp, #20
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80001d0:	4b08      	ldr	r3, [pc, #32]	; (80001f4 <LL_AHB2_GRP1_EnableClock+0x2c>)
 80001d2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80001d4:	4907      	ldr	r1, [pc, #28]	; (80001f4 <LL_AHB2_GRP1_EnableClock+0x2c>)
 80001d6:	687b      	ldr	r3, [r7, #4]
 80001d8:	4313      	orrs	r3, r2
 80001da:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80001dc:	4b05      	ldr	r3, [pc, #20]	; (80001f4 <LL_AHB2_GRP1_EnableClock+0x2c>)
 80001de:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80001e0:	687b      	ldr	r3, [r7, #4]
 80001e2:	4013      	ands	r3, r2
 80001e4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80001e6:	68fb      	ldr	r3, [r7, #12]
}
 80001e8:	bf00      	nop
 80001ea:	3714      	adds	r7, #20
 80001ec:	46bd      	mov	sp, r7
 80001ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001f2:	4770      	bx	lr
 80001f4:	40021000 	.word	0x40021000

080001f8 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 80001f8:	b480      	push	{r7}
 80001fa:	b08b      	sub	sp, #44	; 0x2c
 80001fc:	af00      	add	r7, sp, #0
 80001fe:	60f8      	str	r0, [r7, #12]
 8000200:	60b9      	str	r1, [r7, #8]
 8000202:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8000204:	68fb      	ldr	r3, [r7, #12]
 8000206:	681a      	ldr	r2, [r3, #0]
 8000208:	68bb      	ldr	r3, [r7, #8]
 800020a:	617b      	str	r3, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800020c:	697b      	ldr	r3, [r7, #20]
 800020e:	fa93 f3a3 	rbit	r3, r3
 8000212:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000214:	693b      	ldr	r3, [r7, #16]
 8000216:	61bb      	str	r3, [r7, #24]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8000218:	69bb      	ldr	r3, [r7, #24]
 800021a:	2b00      	cmp	r3, #0
 800021c:	d101      	bne.n	8000222 <LL_GPIO_SetPinMode+0x2a>
  {
    return 32U;
 800021e:	2320      	movs	r3, #32
 8000220:	e003      	b.n	800022a <LL_GPIO_SetPinMode+0x32>
  }
  return __builtin_clz(value);
 8000222:	69bb      	ldr	r3, [r7, #24]
 8000224:	fab3 f383 	clz	r3, r3
 8000228:	b2db      	uxtb	r3, r3
 800022a:	005b      	lsls	r3, r3, #1
 800022c:	2103      	movs	r1, #3
 800022e:	fa01 f303 	lsl.w	r3, r1, r3
 8000232:	43db      	mvns	r3, r3
 8000234:	401a      	ands	r2, r3
 8000236:	68bb      	ldr	r3, [r7, #8]
 8000238:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800023a:	6a3b      	ldr	r3, [r7, #32]
 800023c:	fa93 f3a3 	rbit	r3, r3
 8000240:	61fb      	str	r3, [r7, #28]
  return result;
 8000242:	69fb      	ldr	r3, [r7, #28]
 8000244:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8000246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000248:	2b00      	cmp	r3, #0
 800024a:	d101      	bne.n	8000250 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 800024c:	2320      	movs	r3, #32
 800024e:	e003      	b.n	8000258 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 8000250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000252:	fab3 f383 	clz	r3, r3
 8000256:	b2db      	uxtb	r3, r3
 8000258:	005b      	lsls	r3, r3, #1
 800025a:	6879      	ldr	r1, [r7, #4]
 800025c:	fa01 f303 	lsl.w	r3, r1, r3
 8000260:	431a      	orrs	r2, r3
 8000262:	68fb      	ldr	r3, [r7, #12]
 8000264:	601a      	str	r2, [r3, #0]
}
 8000266:	bf00      	nop
 8000268:	372c      	adds	r7, #44	; 0x2c
 800026a:	46bd      	mov	sp, r7
 800026c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000270:	4770      	bx	lr

08000272 <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 8000272:	b480      	push	{r7}
 8000274:	b085      	sub	sp, #20
 8000276:	af00      	add	r7, sp, #0
 8000278:	60f8      	str	r0, [r7, #12]
 800027a:	60b9      	str	r1, [r7, #8]
 800027c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800027e:	68fb      	ldr	r3, [r7, #12]
 8000280:	685a      	ldr	r2, [r3, #4]
 8000282:	68bb      	ldr	r3, [r7, #8]
 8000284:	43db      	mvns	r3, r3
 8000286:	401a      	ands	r2, r3
 8000288:	68bb      	ldr	r3, [r7, #8]
 800028a:	6879      	ldr	r1, [r7, #4]
 800028c:	fb01 f303 	mul.w	r3, r1, r3
 8000290:	431a      	orrs	r2, r3
 8000292:	68fb      	ldr	r3, [r7, #12]
 8000294:	605a      	str	r2, [r3, #4]
}
 8000296:	bf00      	nop
 8000298:	3714      	adds	r7, #20
 800029a:	46bd      	mov	sp, r7
 800029c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002a0:	4770      	bx	lr

080002a2 <LL_GPIO_IsInputPinSet>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_GPIO_IsInputPinSet(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80002a2:	b480      	push	{r7}
 80002a4:	b083      	sub	sp, #12
 80002a6:	af00      	add	r7, sp, #0
 80002a8:	6078      	str	r0, [r7, #4]
 80002aa:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(GPIOx->IDR, PinMask) == (PinMask)) ? 1UL : 0UL);
 80002ac:	687b      	ldr	r3, [r7, #4]
 80002ae:	691a      	ldr	r2, [r3, #16]
 80002b0:	683b      	ldr	r3, [r7, #0]
 80002b2:	4013      	ands	r3, r2
 80002b4:	683a      	ldr	r2, [r7, #0]
 80002b6:	429a      	cmp	r2, r3
 80002b8:	d101      	bne.n	80002be <LL_GPIO_IsInputPinSet+0x1c>
 80002ba:	2301      	movs	r3, #1
 80002bc:	e000      	b.n	80002c0 <LL_GPIO_IsInputPinSet+0x1e>
 80002be:	2300      	movs	r3, #0
}
 80002c0:	4618      	mov	r0, r3
 80002c2:	370c      	adds	r7, #12
 80002c4:	46bd      	mov	sp, r7
 80002c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002ca:	4770      	bx	lr

080002cc <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80002cc:	b480      	push	{r7}
 80002ce:	b083      	sub	sp, #12
 80002d0:	af00      	add	r7, sp, #0
 80002d2:	6078      	str	r0, [r7, #4]
 80002d4:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 80002d6:	687b      	ldr	r3, [r7, #4]
 80002d8:	683a      	ldr	r2, [r7, #0]
 80002da:	619a      	str	r2, [r3, #24]
}
 80002dc:	bf00      	nop
 80002de:	370c      	adds	r7, #12
 80002e0:	46bd      	mov	sp, r7
 80002e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002e6:	4770      	bx	lr

080002e8 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80002e8:	b480      	push	{r7}
 80002ea:	b083      	sub	sp, #12
 80002ec:	af00      	add	r7, sp, #0
 80002ee:	6078      	str	r0, [r7, #4]
 80002f0:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 80002f2:	687b      	ldr	r3, [r7, #4]
 80002f4:	683a      	ldr	r2, [r7, #0]
 80002f6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80002f8:	bf00      	nop
 80002fa:	370c      	adds	r7, #12
 80002fc:	46bd      	mov	sp, r7
 80002fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000302:	4770      	bx	lr

08000304 <GPIO_init>:
#define BUT_PIN LL_GPIO_PIN_13
#define SQUARE_PORT GPIOC
#define SQUARE_PIN LL_GPIO_PIN_10


void GPIO_init(void) {
 8000304:	b580      	push	{r7, lr}
 8000306:	af00      	add	r7, sp, #0
	// PORT A Clock Enable
	LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 8000308:	2001      	movs	r0, #1
 800030a:	f7ff ff5d 	bl	80001c8 <LL_AHB2_GRP1_EnableClock>
	// Green LED (user LED) - PA5
	LL_GPIO_SetPinMode(LED_PORT, LED_PIN, LL_GPIO_MODE_OUTPUT );
 800030e:	2201      	movs	r2, #1
 8000310:	2120      	movs	r1, #32
 8000312:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000316:	f7ff ff6f 	bl	80001f8 <LL_GPIO_SetPinMode>
	LL_GPIO_SetPinOutputType(LED_PORT, LED_PIN, LL_GPIO_OUTPUT_PUSHPULL);
 800031a:	2200      	movs	r2, #0
 800031c:	2120      	movs	r1, #32
 800031e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000322:	f7ff ffa6 	bl	8000272 <LL_GPIO_SetPinOutputType>

	// PORT C Clock Enable
	LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOC);
 8000326:	2004      	movs	r0, #4
 8000328:	f7ff ff4e 	bl	80001c8 <LL_AHB2_GRP1_EnableClock>
	// Blue button - PC13
	LL_GPIO_SetPinMode(BUT_PORT, BUT_PIN, LL_GPIO_MODE_INPUT);
 800032c:	2200      	movs	r2, #0
 800032e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000332:	4808      	ldr	r0, [pc, #32]	; (8000354 <GPIO_init+0x50>)
 8000334:	f7ff ff60 	bl	80001f8 <LL_GPIO_SetPinMode>
	// Square Signal - PC10
	LL_GPIO_SetPinMode(SQUARE_PORT, SQUARE_PIN, LL_GPIO_MODE_OUTPUT);
 8000338:	2201      	movs	r2, #1
 800033a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800033e:	4805      	ldr	r0, [pc, #20]	; (8000354 <GPIO_init+0x50>)
 8000340:	f7ff ff5a 	bl	80001f8 <LL_GPIO_SetPinMode>
	LL_GPIO_SetPinOutputType(SQUARE_PORT, SQUARE_PIN, LL_GPIO_OUTPUT_PUSHPULL);
 8000344:	2200      	movs	r2, #0
 8000346:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800034a:	4802      	ldr	r0, [pc, #8]	; (8000354 <GPIO_init+0x50>)
 800034c:	f7ff ff91 	bl	8000272 <LL_GPIO_SetPinOutputType>
}
 8000350:	bf00      	nop
 8000352:	bd80      	pop	{r7, pc}
 8000354:	48000800 	.word	0x48000800

08000358 <LED_GREEN>:

void LED_GREEN(int val) {
 8000358:	b580      	push	{r7, lr}
 800035a:	b082      	sub	sp, #8
 800035c:	af00      	add	r7, sp, #0
 800035e:	6078      	str	r0, [r7, #4]
	if (val)
 8000360:	687b      	ldr	r3, [r7, #4]
 8000362:	2b00      	cmp	r3, #0
 8000364:	d005      	beq.n	8000372 <LED_GREEN+0x1a>
		LL_GPIO_SetOutputPin(LED_PORT, LED_PIN);
 8000366:	2120      	movs	r1, #32
 8000368:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800036c:	f7ff ffae 	bl	80002cc <LL_GPIO_SetOutputPin>
	else
		LL_GPIO_ResetOutputPin(LED_PORT, LED_PIN);
}
 8000370:	e004      	b.n	800037c <LED_GREEN+0x24>
		LL_GPIO_ResetOutputPin(LED_PORT, LED_PIN);
 8000372:	2120      	movs	r1, #32
 8000374:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000378:	f7ff ffb6 	bl	80002e8 <LL_GPIO_ResetOutputPin>
}
 800037c:	bf00      	nop
 800037e:	3708      	adds	r7, #8
 8000380:	46bd      	mov	sp, r7
 8000382:	bd80      	pop	{r7, pc}

08000384 <SQUARE_SIGNAL>:

void SQUARE_SIGNAL(int val) {
 8000384:	b580      	push	{r7, lr}
 8000386:	b082      	sub	sp, #8
 8000388:	af00      	add	r7, sp, #0
 800038a:	6078      	str	r0, [r7, #4]
	if (val)
 800038c:	687b      	ldr	r3, [r7, #4]
 800038e:	2b00      	cmp	r3, #0
 8000390:	d005      	beq.n	800039e <SQUARE_SIGNAL+0x1a>
		LL_GPIO_SetOutputPin(SQUARE_PORT, SQUARE_PIN);
 8000392:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000396:	4806      	ldr	r0, [pc, #24]	; (80003b0 <SQUARE_SIGNAL+0x2c>)
 8000398:	f7ff ff98 	bl	80002cc <LL_GPIO_SetOutputPin>
	else
		LL_GPIO_ResetOutputPin(SQUARE_PORT, SQUARE_PIN);
}
 800039c:	e004      	b.n	80003a8 <SQUARE_SIGNAL+0x24>
		LL_GPIO_ResetOutputPin(SQUARE_PORT, SQUARE_PIN);
 800039e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80003a2:	4803      	ldr	r0, [pc, #12]	; (80003b0 <SQUARE_SIGNAL+0x2c>)
 80003a4:	f7ff ffa0 	bl	80002e8 <LL_GPIO_ResetOutputPin>
}
 80003a8:	bf00      	nop
 80003aa:	3708      	adds	r7, #8
 80003ac:	46bd      	mov	sp, r7
 80003ae:	bd80      	pop	{r7, pc}
 80003b0:	48000800 	.word	0x48000800

080003b4 <BLUE_BUTTON>:


int BLUE_BUTTON() {
 80003b4:	b580      	push	{r7, lr}
 80003b6:	af00      	add	r7, sp, #0
	return(!LL_GPIO_IsInputPinSet(BUT_PORT, BUT_PIN));
 80003b8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80003bc:	4805      	ldr	r0, [pc, #20]	; (80003d4 <BLUE_BUTTON+0x20>)
 80003be:	f7ff ff70 	bl	80002a2 <LL_GPIO_IsInputPinSet>
 80003c2:	4603      	mov	r3, r0
 80003c4:	2b00      	cmp	r3, #0
 80003c6:	bf0c      	ite	eq
 80003c8:	2301      	moveq	r3, #1
 80003ca:	2300      	movne	r3, #0
 80003cc:	b2db      	uxtb	r3, r3
}
 80003ce:	4618      	mov	r0, r3
 80003d0:	bd80      	pop	{r7, pc}
 80003d2:	bf00      	nop
 80003d4:	48000800 	.word	0x48000800

080003d8 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80003d8:	b480      	push	{r7}
 80003da:	b085      	sub	sp, #20
 80003dc:	af00      	add	r7, sp, #0
 80003de:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 80003e0:	4b08      	ldr	r3, [pc, #32]	; (8000404 <LL_APB1_GRP1_EnableClock+0x2c>)
 80003e2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80003e4:	4907      	ldr	r1, [pc, #28]	; (8000404 <LL_APB1_GRP1_EnableClock+0x2c>)
 80003e6:	687b      	ldr	r3, [r7, #4]
 80003e8:	4313      	orrs	r3, r2
 80003ea:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80003ec:	4b05      	ldr	r3, [pc, #20]	; (8000404 <LL_APB1_GRP1_EnableClock+0x2c>)
 80003ee:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80003f0:	687b      	ldr	r3, [r7, #4]
 80003f2:	4013      	ands	r3, r2
 80003f4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80003f6:	68fb      	ldr	r3, [r7, #12]
}
 80003f8:	bf00      	nop
 80003fa:	3714      	adds	r7, #20
 80003fc:	46bd      	mov	sp, r7
 80003fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000402:	4770      	bx	lr
 8000404:	40021000 	.word	0x40021000

08000408 <LL_RCC_LSE_Enable>:
  * @brief  Enable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Enable(void)
{
 8000408:	b480      	push	{r7}
 800040a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800040c:	4b06      	ldr	r3, [pc, #24]	; (8000428 <LL_RCC_LSE_Enable+0x20>)
 800040e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000412:	4a05      	ldr	r2, [pc, #20]	; (8000428 <LL_RCC_LSE_Enable+0x20>)
 8000414:	f043 0301 	orr.w	r3, r3, #1
 8000418:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800041c:	bf00      	nop
 800041e:	46bd      	mov	sp, r7
 8000420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000424:	4770      	bx	lr
 8000426:	bf00      	nop
 8000428:	40021000 	.word	0x40021000

0800042c <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 800042c:	b480      	push	{r7}
 800042e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == RCC_BDCR_LSERDY) ? 1UL : 0UL);
 8000430:	4b07      	ldr	r3, [pc, #28]	; (8000450 <LL_RCC_LSE_IsReady+0x24>)
 8000432:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000436:	f003 0302 	and.w	r3, r3, #2
 800043a:	2b02      	cmp	r3, #2
 800043c:	d101      	bne.n	8000442 <LL_RCC_LSE_IsReady+0x16>
 800043e:	2301      	movs	r3, #1
 8000440:	e000      	b.n	8000444 <LL_RCC_LSE_IsReady+0x18>
 8000442:	2300      	movs	r3, #0
}
 8000444:	4618      	mov	r0, r3
 8000446:	46bd      	mov	sp, r7
 8000448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800044c:	4770      	bx	lr
 800044e:	bf00      	nop
 8000450:	40021000 	.word	0x40021000

08000454 <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 8000454:	b480      	push	{r7}
 8000456:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8000458:	4b05      	ldr	r3, [pc, #20]	; (8000470 <LL_RCC_MSI_Enable+0x1c>)
 800045a:	681b      	ldr	r3, [r3, #0]
 800045c:	4a04      	ldr	r2, [pc, #16]	; (8000470 <LL_RCC_MSI_Enable+0x1c>)
 800045e:	f043 0301 	orr.w	r3, r3, #1
 8000462:	6013      	str	r3, [r2, #0]
}
 8000464:	bf00      	nop
 8000466:	46bd      	mov	sp, r7
 8000468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800046c:	4770      	bx	lr
 800046e:	bf00      	nop
 8000470:	40021000 	.word	0x40021000

08000474 <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 8000474:	b480      	push	{r7}
 8000476:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == RCC_CR_MSIRDY) ? 1UL : 0UL);
 8000478:	4b06      	ldr	r3, [pc, #24]	; (8000494 <LL_RCC_MSI_IsReady+0x20>)
 800047a:	681b      	ldr	r3, [r3, #0]
 800047c:	f003 0302 	and.w	r3, r3, #2
 8000480:	2b02      	cmp	r3, #2
 8000482:	d101      	bne.n	8000488 <LL_RCC_MSI_IsReady+0x14>
 8000484:	2301      	movs	r3, #1
 8000486:	e000      	b.n	800048a <LL_RCC_MSI_IsReady+0x16>
 8000488:	2300      	movs	r3, #0
}
 800048a:	4618      	mov	r0, r3
 800048c:	46bd      	mov	sp, r7
 800048e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000492:	4770      	bx	lr
 8000494:	40021000 	.word	0x40021000

08000498 <LL_RCC_MSI_EnablePLLMode>:
  *       ready
  * @rmtoll CR           MSIPLLEN      LL_RCC_MSI_EnablePLLMode
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_EnablePLLMode(void)
{
 8000498:	b480      	push	{r7}
 800049a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN);
 800049c:	4b05      	ldr	r3, [pc, #20]	; (80004b4 <LL_RCC_MSI_EnablePLLMode+0x1c>)
 800049e:	681b      	ldr	r3, [r3, #0]
 80004a0:	4a04      	ldr	r2, [pc, #16]	; (80004b4 <LL_RCC_MSI_EnablePLLMode+0x1c>)
 80004a2:	f043 0304 	orr.w	r3, r3, #4
 80004a6:	6013      	str	r3, [r2, #0]
}
 80004a8:	bf00      	nop
 80004aa:	46bd      	mov	sp, r7
 80004ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004b0:	4770      	bx	lr
 80004b2:	bf00      	nop
 80004b4:	40021000 	.word	0x40021000

080004b8 <LL_RCC_MSI_EnableRangeSelection>:
  *       MSISRANGE
  * @rmtoll CR           MSIRGSEL      LL_RCC_MSI_EnableRangeSelection
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_EnableRangeSelection(void)
{
 80004b8:	b480      	push	{r7}
 80004ba:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIRGSEL);
 80004bc:	4b05      	ldr	r3, [pc, #20]	; (80004d4 <LL_RCC_MSI_EnableRangeSelection+0x1c>)
 80004be:	681b      	ldr	r3, [r3, #0]
 80004c0:	4a04      	ldr	r2, [pc, #16]	; (80004d4 <LL_RCC_MSI_EnableRangeSelection+0x1c>)
 80004c2:	f043 0308 	orr.w	r3, r3, #8
 80004c6:	6013      	str	r3, [r2, #0]
}
 80004c8:	bf00      	nop
 80004ca:	46bd      	mov	sp, r7
 80004cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004d0:	4770      	bx	lr
 80004d2:	bf00      	nop
 80004d4:	40021000 	.word	0x40021000

080004d8 <LL_RCC_MSI_SetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetRange(uint32_t Range)
{
 80004d8:	b480      	push	{r7}
 80004da:	b083      	sub	sp, #12
 80004dc:	af00      	add	r7, sp, #0
 80004de:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 80004e0:	4b06      	ldr	r3, [pc, #24]	; (80004fc <LL_RCC_MSI_SetRange+0x24>)
 80004e2:	681b      	ldr	r3, [r3, #0]
 80004e4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80004e8:	4904      	ldr	r1, [pc, #16]	; (80004fc <LL_RCC_MSI_SetRange+0x24>)
 80004ea:	687b      	ldr	r3, [r7, #4]
 80004ec:	4313      	orrs	r3, r2
 80004ee:	600b      	str	r3, [r1, #0]
}
 80004f0:	bf00      	nop
 80004f2:	370c      	adds	r7, #12
 80004f4:	46bd      	mov	sp, r7
 80004f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004fa:	4770      	bx	lr
 80004fc:	40021000 	.word	0x40021000

08000500 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8000500:	b480      	push	{r7}
 8000502:	b083      	sub	sp, #12
 8000504:	af00      	add	r7, sp, #0
 8000506:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8000508:	4b06      	ldr	r3, [pc, #24]	; (8000524 <LL_RCC_SetSysClkSource+0x24>)
 800050a:	689b      	ldr	r3, [r3, #8]
 800050c:	f023 0203 	bic.w	r2, r3, #3
 8000510:	4904      	ldr	r1, [pc, #16]	; (8000524 <LL_RCC_SetSysClkSource+0x24>)
 8000512:	687b      	ldr	r3, [r7, #4]
 8000514:	4313      	orrs	r3, r2
 8000516:	608b      	str	r3, [r1, #8]
}
 8000518:	bf00      	nop
 800051a:	370c      	adds	r7, #12
 800051c:	46bd      	mov	sp, r7
 800051e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000522:	4770      	bx	lr
 8000524:	40021000 	.word	0x40021000

08000528 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8000528:	b480      	push	{r7}
 800052a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800052c:	4b04      	ldr	r3, [pc, #16]	; (8000540 <LL_RCC_GetSysClkSource+0x18>)
 800052e:	689b      	ldr	r3, [r3, #8]
 8000530:	f003 030c 	and.w	r3, r3, #12
}
 8000534:	4618      	mov	r0, r3
 8000536:	46bd      	mov	sp, r7
 8000538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800053c:	4770      	bx	lr
 800053e:	bf00      	nop
 8000540:	40021000 	.word	0x40021000

08000544 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8000544:	b480      	push	{r7}
 8000546:	b083      	sub	sp, #12
 8000548:	af00      	add	r7, sp, #0
 800054a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800054c:	4b06      	ldr	r3, [pc, #24]	; (8000568 <LL_RCC_SetAHBPrescaler+0x24>)
 800054e:	689b      	ldr	r3, [r3, #8]
 8000550:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000554:	4904      	ldr	r1, [pc, #16]	; (8000568 <LL_RCC_SetAHBPrescaler+0x24>)
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	4313      	orrs	r3, r2
 800055a:	608b      	str	r3, [r1, #8]
}
 800055c:	bf00      	nop
 800055e:	370c      	adds	r7, #12
 8000560:	46bd      	mov	sp, r7
 8000562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000566:	4770      	bx	lr
 8000568:	40021000 	.word	0x40021000

0800056c <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 800056c:	b480      	push	{r7}
 800056e:	b083      	sub	sp, #12
 8000570:	af00      	add	r7, sp, #0
 8000572:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8000574:	4b06      	ldr	r3, [pc, #24]	; (8000590 <LL_RCC_SetAPB1Prescaler+0x24>)
 8000576:	689b      	ldr	r3, [r3, #8]
 8000578:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800057c:	4904      	ldr	r1, [pc, #16]	; (8000590 <LL_RCC_SetAPB1Prescaler+0x24>)
 800057e:	687b      	ldr	r3, [r7, #4]
 8000580:	4313      	orrs	r3, r2
 8000582:	608b      	str	r3, [r1, #8]
}
 8000584:	bf00      	nop
 8000586:	370c      	adds	r7, #12
 8000588:	46bd      	mov	sp, r7
 800058a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800058e:	4770      	bx	lr
 8000590:	40021000 	.word	0x40021000

08000594 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8000594:	b480      	push	{r7}
 8000596:	b083      	sub	sp, #12
 8000598:	af00      	add	r7, sp, #0
 800059a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 800059c:	4b06      	ldr	r3, [pc, #24]	; (80005b8 <LL_RCC_SetAPB2Prescaler+0x24>)
 800059e:	689b      	ldr	r3, [r3, #8]
 80005a0:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80005a4:	4904      	ldr	r1, [pc, #16]	; (80005b8 <LL_RCC_SetAPB2Prescaler+0x24>)
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	4313      	orrs	r3, r2
 80005aa:	608b      	str	r3, [r1, #8]
}
 80005ac:	bf00      	nop
 80005ae:	370c      	adds	r7, #12
 80005b0:	46bd      	mov	sp, r7
 80005b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b6:	4770      	bx	lr
 80005b8:	40021000 	.word	0x40021000

080005bc <LL_RCC_SetRTCClockSource>:
  *         @arg @ref LL_RCC_RTC_CLKSOURCE_LSI
  *         @arg @ref LL_RCC_RTC_CLKSOURCE_HSE_DIV32
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetRTCClockSource(uint32_t Source)
{
 80005bc:	b480      	push	{r7}
 80005be:	b083      	sub	sp, #12
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 80005c4:	4b07      	ldr	r3, [pc, #28]	; (80005e4 <LL_RCC_SetRTCClockSource+0x28>)
 80005c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80005ca:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80005ce:	4905      	ldr	r1, [pc, #20]	; (80005e4 <LL_RCC_SetRTCClockSource+0x28>)
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	4313      	orrs	r3, r2
 80005d4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80005d8:	bf00      	nop
 80005da:	370c      	adds	r7, #12
 80005dc:	46bd      	mov	sp, r7
 80005de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e2:	4770      	bx	lr
 80005e4:	40021000 	.word	0x40021000

080005e8 <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 80005e8:	b480      	push	{r7}
 80005ea:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 80005ec:	4b06      	ldr	r3, [pc, #24]	; (8000608 <LL_RCC_EnableRTC+0x20>)
 80005ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80005f2:	4a05      	ldr	r2, [pc, #20]	; (8000608 <LL_RCC_EnableRTC+0x20>)
 80005f4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80005f8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80005fc:	bf00      	nop
 80005fe:	46bd      	mov	sp, r7
 8000600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000604:	4770      	bx	lr
 8000606:	bf00      	nop
 8000608:	40021000 	.word	0x40021000

0800060c <LL_RCC_ForceBackupDomainReset>:
  * @brief  Force the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ForceBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ForceBackupDomainReset(void)
{
 800060c:	b480      	push	{r7}
 800060e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8000610:	4b06      	ldr	r3, [pc, #24]	; (800062c <LL_RCC_ForceBackupDomainReset+0x20>)
 8000612:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000616:	4a05      	ldr	r2, [pc, #20]	; (800062c <LL_RCC_ForceBackupDomainReset+0x20>)
 8000618:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800061c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8000620:	bf00      	nop
 8000622:	46bd      	mov	sp, r7
 8000624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000628:	4770      	bx	lr
 800062a:	bf00      	nop
 800062c:	40021000 	.word	0x40021000

08000630 <LL_RCC_ReleaseBackupDomainReset>:
  * @brief  Release the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ReleaseBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ReleaseBackupDomainReset(void)
{
 8000630:	b480      	push	{r7}
 8000632:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8000634:	4b06      	ldr	r3, [pc, #24]	; (8000650 <LL_RCC_ReleaseBackupDomainReset+0x20>)
 8000636:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800063a:	4a05      	ldr	r2, [pc, #20]	; (8000650 <LL_RCC_ReleaseBackupDomainReset+0x20>)
 800063c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000640:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8000644:	bf00      	nop
 8000646:	46bd      	mov	sp, r7
 8000648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800064c:	4770      	bx	lr
 800064e:	bf00      	nop
 8000650:	40021000 	.word	0x40021000

08000654 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8000654:	b480      	push	{r7}
 8000656:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8000658:	4b05      	ldr	r3, [pc, #20]	; (8000670 <LL_RCC_PLL_Enable+0x1c>)
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	4a04      	ldr	r2, [pc, #16]	; (8000670 <LL_RCC_PLL_Enable+0x1c>)
 800065e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000662:	6013      	str	r3, [r2, #0]
}
 8000664:	bf00      	nop
 8000666:	46bd      	mov	sp, r7
 8000668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800066c:	4770      	bx	lr
 800066e:	bf00      	nop
 8000670:	40021000 	.word	0x40021000

08000674 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8000674:	b480      	push	{r7}
 8000676:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RCC_CR_PLLRDY) ? 1UL : 0UL);
 8000678:	4b07      	ldr	r3, [pc, #28]	; (8000698 <LL_RCC_PLL_IsReady+0x24>)
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000680:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8000684:	d101      	bne.n	800068a <LL_RCC_PLL_IsReady+0x16>
 8000686:	2301      	movs	r3, #1
 8000688:	e000      	b.n	800068c <LL_RCC_PLL_IsReady+0x18>
 800068a:	2300      	movs	r3, #0
}
 800068c:	4618      	mov	r0, r3
 800068e:	46bd      	mov	sp, r7
 8000690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000694:	4770      	bx	lr
 8000696:	bf00      	nop
 8000698:	40021000 	.word	0x40021000

0800069c <LL_RCC_PLL_ConfigDomain_SYS>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_8
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLM, uint32_t PLLN, uint32_t PLLR)
{
 800069c:	b480      	push	{r7}
 800069e:	b085      	sub	sp, #20
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	60f8      	str	r0, [r7, #12]
 80006a4:	60b9      	str	r1, [r7, #8]
 80006a6:	607a      	str	r2, [r7, #4]
 80006a8:	603b      	str	r3, [r7, #0]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN | RCC_PLLCFGR_PLLR,
 80006aa:	4b0a      	ldr	r3, [pc, #40]	; (80006d4 <LL_RCC_PLL_ConfigDomain_SYS+0x38>)
 80006ac:	68da      	ldr	r2, [r3, #12]
 80006ae:	4b0a      	ldr	r3, [pc, #40]	; (80006d8 <LL_RCC_PLL_ConfigDomain_SYS+0x3c>)
 80006b0:	4013      	ands	r3, r2
 80006b2:	68f9      	ldr	r1, [r7, #12]
 80006b4:	68ba      	ldr	r2, [r7, #8]
 80006b6:	4311      	orrs	r1, r2
 80006b8:	687a      	ldr	r2, [r7, #4]
 80006ba:	0212      	lsls	r2, r2, #8
 80006bc:	4311      	orrs	r1, r2
 80006be:	683a      	ldr	r2, [r7, #0]
 80006c0:	430a      	orrs	r2, r1
 80006c2:	4904      	ldr	r1, [pc, #16]	; (80006d4 <LL_RCC_PLL_ConfigDomain_SYS+0x38>)
 80006c4:	4313      	orrs	r3, r2
 80006c6:	60cb      	str	r3, [r1, #12]
             Source | PLLM | (PLLN << RCC_PLLCFGR_PLLN_Pos) | PLLR);
}
 80006c8:	bf00      	nop
 80006ca:	3714      	adds	r7, #20
 80006cc:	46bd      	mov	sp, r7
 80006ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d2:	4770      	bx	lr
 80006d4:	40021000 	.word	0x40021000
 80006d8:	f9ff808c 	.word	0xf9ff808c

080006dc <LL_RCC_PLL_EnableDomain_SYS>:
  * @brief  Enable PLL output mapped on SYSCLK domain
  * @rmtoll PLLCFGR      PLLREN        LL_RCC_PLL_EnableDomain_SYS
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_EnableDomain_SYS(void)
{
 80006dc:	b480      	push	{r7}
 80006de:	af00      	add	r7, sp, #0
  SET_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLREN);
 80006e0:	4b05      	ldr	r3, [pc, #20]	; (80006f8 <LL_RCC_PLL_EnableDomain_SYS+0x1c>)
 80006e2:	68db      	ldr	r3, [r3, #12]
 80006e4:	4a04      	ldr	r2, [pc, #16]	; (80006f8 <LL_RCC_PLL_EnableDomain_SYS+0x1c>)
 80006e6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80006ea:	60d3      	str	r3, [r2, #12]
}
 80006ec:	bf00      	nop
 80006ee:	46bd      	mov	sp, r7
 80006f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f4:	4770      	bx	lr
 80006f6:	bf00      	nop
 80006f8:	40021000 	.word	0x40021000

080006fc <LL_FLASH_SetLatency>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 80006fc:	b480      	push	{r7}
 80006fe:	b083      	sub	sp, #12
 8000700:	af00      	add	r7, sp, #0
 8000702:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8000704:	4b06      	ldr	r3, [pc, #24]	; (8000720 <LL_FLASH_SetLatency+0x24>)
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	f023 0207 	bic.w	r2, r3, #7
 800070c:	4904      	ldr	r1, [pc, #16]	; (8000720 <LL_FLASH_SetLatency+0x24>)
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	4313      	orrs	r3, r2
 8000712:	600b      	str	r3, [r1, #0]
}
 8000714:	bf00      	nop
 8000716:	370c      	adds	r7, #12
 8000718:	46bd      	mov	sp, r7
 800071a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800071e:	4770      	bx	lr
 8000720:	40022000 	.word	0x40022000

08000724 <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 8000724:	b480      	push	{r7}
 8000726:	b083      	sub	sp, #12
 8000728:	af00      	add	r7, sp, #0
 800072a:	6078      	str	r0, [r7, #4]
 800072c:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 800072e:	687a      	ldr	r2, [r7, #4]
 8000730:	683b      	ldr	r3, [r7, #0]
 8000732:	fbb2 f3f3 	udiv	r3, r2, r3
 8000736:	4a07      	ldr	r2, [pc, #28]	; (8000754 <LL_InitTick+0x30>)
 8000738:	3b01      	subs	r3, #1
 800073a:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 800073c:	4b05      	ldr	r3, [pc, #20]	; (8000754 <LL_InitTick+0x30>)
 800073e:	2200      	movs	r2, #0
 8000740:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000742:	4b04      	ldr	r3, [pc, #16]	; (8000754 <LL_InitTick+0x30>)
 8000744:	2205      	movs	r2, #5
 8000746:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 8000748:	bf00      	nop
 800074a:	370c      	adds	r7, #12
 800074c:	46bd      	mov	sp, r7
 800074e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000752:	4770      	bx	lr
 8000754:	e000e010 	.word	0xe000e010

08000758 <LL_RTC_BAK_SetRegister>:
  *         @arg @ref LL_RTC_BKP_DR31
  * @param  Data Value between Min_Data=0x00 and Max_Data=0xFFFFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_RTC_BAK_SetRegister(RTC_TypeDef *RTCx, uint32_t BackupRegister, uint32_t Data)
{
 8000758:	b480      	push	{r7}
 800075a:	b087      	sub	sp, #28
 800075c:	af00      	add	r7, sp, #0
 800075e:	60f8      	str	r0, [r7, #12]
 8000760:	60b9      	str	r1, [r7, #8]
 8000762:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 8000764:	2300      	movs	r3, #0
 8000766:	617b      	str	r3, [r7, #20]

  tmp = (uint32_t)(&(RTCx->BKP0R));
 8000768:	68fb      	ldr	r3, [r7, #12]
 800076a:	3350      	adds	r3, #80	; 0x50
 800076c:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 800076e:	68bb      	ldr	r3, [r7, #8]
 8000770:	009b      	lsls	r3, r3, #2
 8000772:	697a      	ldr	r2, [r7, #20]
 8000774:	4413      	add	r3, r2
 8000776:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8000778:	697b      	ldr	r3, [r7, #20]
 800077a:	687a      	ldr	r2, [r7, #4]
 800077c:	601a      	str	r2, [r3, #0]
}
 800077e:	bf00      	nop
 8000780:	371c      	adds	r7, #28
 8000782:	46bd      	mov	sp, r7
 8000784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000788:	4770      	bx	lr

0800078a <LL_RTC_BAK_GetRegister>:
  *         @arg @ref LL_RTC_BKP_DR30
  *         @arg @ref LL_RTC_BKP_DR31
  * @retval Value between Min_Data=0x00 and Max_Data=0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_RTC_BAK_GetRegister(RTC_TypeDef *RTCx, uint32_t BackupRegister)
{
 800078a:	b480      	push	{r7}
 800078c:	b085      	sub	sp, #20
 800078e:	af00      	add	r7, sp, #0
 8000790:	6078      	str	r0, [r7, #4]
 8000792:	6039      	str	r1, [r7, #0]
  uint32_t tmp = 0U;
 8000794:	2300      	movs	r3, #0
 8000796:	60fb      	str	r3, [r7, #12]

  tmp = (uint32_t)(&(RTCx->BKP0R));
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	3350      	adds	r3, #80	; 0x50
 800079c:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 800079e:	683b      	ldr	r3, [r7, #0]
 80007a0:	009b      	lsls	r3, r3, #2
 80007a2:	68fa      	ldr	r2, [r7, #12]
 80007a4:	4413      	add	r3, r2
 80007a6:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 80007a8:	68fb      	ldr	r3, [r7, #12]
 80007aa:	681b      	ldr	r3, [r3, #0]
}
 80007ac:	4618      	mov	r0, r3
 80007ae:	3714      	adds	r7, #20
 80007b0:	46bd      	mov	sp, r7
 80007b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b6:	4770      	bx	lr

080007b8 <LL_PWR_SetRegulVoltageScaling>:
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE1
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE2
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
 80007b8:	b480      	push	{r7}
 80007ba:	b083      	sub	sp, #12
 80007bc:	af00      	add	r7, sp, #0
 80007be:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80007c0:	4b06      	ldr	r3, [pc, #24]	; (80007dc <LL_PWR_SetRegulVoltageScaling+0x24>)
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 80007c8:	4904      	ldr	r1, [pc, #16]	; (80007dc <LL_PWR_SetRegulVoltageScaling+0x24>)
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	4313      	orrs	r3, r2
 80007ce:	600b      	str	r3, [r1, #0]
}
 80007d0:	bf00      	nop
 80007d2:	370c      	adds	r7, #12
 80007d4:	46bd      	mov	sp, r7
 80007d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007da:	4770      	bx	lr
 80007dc:	40007000 	.word	0x40007000

080007e0 <LL_PWR_EnableBkUpAccess>:
  * @brief  Enable access to the backup domain
  * @rmtoll CR1          DBP           LL_PWR_EnableBkUpAccess
  * @retval None
  */
__STATIC_INLINE void LL_PWR_EnableBkUpAccess(void)
{
 80007e0:	b480      	push	{r7}
 80007e2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80007e4:	4b05      	ldr	r3, [pc, #20]	; (80007fc <LL_PWR_EnableBkUpAccess+0x1c>)
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	4a04      	ldr	r2, [pc, #16]	; (80007fc <LL_PWR_EnableBkUpAccess+0x1c>)
 80007ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80007ee:	6013      	str	r3, [r2, #0]
}
 80007f0:	bf00      	nop
 80007f2:	46bd      	mov	sp, r7
 80007f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f8:	4770      	bx	lr
 80007fa:	bf00      	nop
 80007fc:	40007000 	.word	0x40007000

08000800 <LL_PWR_SetPowerMode>:
  *         @arg @ref LL_PWR_MODE_STANDBY
  *         @arg @ref LL_PWR_MODE_SHUTDOWN
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetPowerMode(uint32_t LowPowerMode)
{
 8000800:	b480      	push	{r7}
 8000802:	b083      	sub	sp, #12
 8000804:	af00      	add	r7, sp, #0
 8000806:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, LowPowerMode);
 8000808:	4b06      	ldr	r3, [pc, #24]	; (8000824 <LL_PWR_SetPowerMode+0x24>)
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	f023 0207 	bic.w	r2, r3, #7
 8000810:	4904      	ldr	r1, [pc, #16]	; (8000824 <LL_PWR_SetPowerMode+0x24>)
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	4313      	orrs	r3, r2
 8000816:	600b      	str	r3, [r1, #0]
}
 8000818:	bf00      	nop
 800081a:	370c      	adds	r7, #12
 800081c:	46bd      	mov	sp, r7
 800081e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000822:	4770      	bx	lr
 8000824:	40007000 	.word	0x40007000

08000828 <LL_SYSTICK_EnableIT>:
  * @brief  Enable SysTick exception request
  * @rmtoll STK_CTRL     TICKINT       LL_SYSTICK_EnableIT
  * @retval None
  */
__STATIC_INLINE void LL_SYSTICK_EnableIT(void)
{
 8000828:	b480      	push	{r7}
 800082a:	af00      	add	r7, sp, #0
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 800082c:	4b05      	ldr	r3, [pc, #20]	; (8000844 <LL_SYSTICK_EnableIT+0x1c>)
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	4a04      	ldr	r2, [pc, #16]	; (8000844 <LL_SYSTICK_EnableIT+0x1c>)
 8000832:	f043 0302 	orr.w	r3, r3, #2
 8000836:	6013      	str	r3, [r2, #0]
}
 8000838:	bf00      	nop
 800083a:	46bd      	mov	sp, r7
 800083c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000840:	4770      	bx	lr
 8000842:	bf00      	nop
 8000844:	e000e010 	.word	0xe000e010

08000848 <LL_LPM_EnableSleep>:
  * @brief  Processor uses sleep as its low power mode
  * @rmtoll SCB_SCR      SLEEPDEEP     LL_LPM_EnableSleep
  * @retval None
  */
__STATIC_INLINE void LL_LPM_EnableSleep(void)
{
 8000848:	b480      	push	{r7}
 800084a:	af00      	add	r7, sp, #0
  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 800084c:	4b05      	ldr	r3, [pc, #20]	; (8000864 <LL_LPM_EnableSleep+0x1c>)
 800084e:	691b      	ldr	r3, [r3, #16]
 8000850:	4a04      	ldr	r2, [pc, #16]	; (8000864 <LL_LPM_EnableSleep+0x1c>)
 8000852:	f023 0304 	bic.w	r3, r3, #4
 8000856:	6113      	str	r3, [r2, #16]
}
 8000858:	bf00      	nop
 800085a:	46bd      	mov	sp, r7
 800085c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000860:	4770      	bx	lr
 8000862:	bf00      	nop
 8000864:	e000ed00 	.word	0xe000ed00

08000868 <LL_LPM_EnableDeepSleep>:
  * @brief  Processor uses deep sleep as its low power mode
  * @rmtoll SCB_SCR      SLEEPDEEP     LL_LPM_EnableDeepSleep
  * @retval None
  */
__STATIC_INLINE void LL_LPM_EnableDeepSleep(void)
{
 8000868:	b480      	push	{r7}
 800086a:	af00      	add	r7, sp, #0
  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 800086c:	4b05      	ldr	r3, [pc, #20]	; (8000884 <LL_LPM_EnableDeepSleep+0x1c>)
 800086e:	691b      	ldr	r3, [r3, #16]
 8000870:	4a04      	ldr	r2, [pc, #16]	; (8000884 <LL_LPM_EnableDeepSleep+0x1c>)
 8000872:	f043 0304 	orr.w	r3, r3, #4
 8000876:	6113      	str	r3, [r2, #16]
}
 8000878:	bf00      	nop
 800087a:	46bd      	mov	sp, r7
 800087c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000880:	4770      	bx	lr
 8000882:	bf00      	nop
 8000884:	e000ed00 	.word	0xe000ed00

08000888 <SysTick_Handler>:
volatile int blue_mode = 0;
uint32_t expe;


// Systick interrupt handler
void SysTick_Handler() {
 8000888:	b580      	push	{r7, lr}
 800088a:	af00      	add	r7, sp, #0
	// Checking if blue button is pressed
	if (BLUE_BUTTON())
 800088c:	f7ff fd92 	bl	80003b4 <BLUE_BUTTON>
 8000890:	4603      	mov	r3, r0
 8000892:	2b00      	cmp	r3, #0
 8000894:	d002      	beq.n	800089c <SysTick_Handler+0x14>
		blue_mode = 1;
 8000896:	4b18      	ldr	r3, [pc, #96]	; (80008f8 <SysTick_Handler+0x70>)
 8000898:	2201      	movs	r2, #1
 800089a:	601a      	str	r2, [r3, #0]

	// Green LED Management
	if (systick_cnt == 0)
 800089c:	4b17      	ldr	r3, [pc, #92]	; (80008fc <SysTick_Handler+0x74>)
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d103      	bne.n	80008ac <SysTick_Handler+0x24>
		LED_GREEN(1);
 80008a4:	2001      	movs	r0, #1
 80008a6:	f7ff fd57 	bl	8000358 <LED_GREEN>
 80008aa:	e014      	b.n	80008d6 <SysTick_Handler+0x4e>
	else if (systick_cnt == 5*expe)
 80008ac:	4b14      	ldr	r3, [pc, #80]	; (8000900 <SysTick_Handler+0x78>)
 80008ae:	681a      	ldr	r2, [r3, #0]
 80008b0:	4613      	mov	r3, r2
 80008b2:	009b      	lsls	r3, r3, #2
 80008b4:	4413      	add	r3, r2
 80008b6:	4a11      	ldr	r2, [pc, #68]	; (80008fc <SysTick_Handler+0x74>)
 80008b8:	6812      	ldr	r2, [r2, #0]
 80008ba:	4293      	cmp	r3, r2
 80008bc:	d103      	bne.n	80008c6 <SysTick_Handler+0x3e>
		LED_GREEN(0);
 80008be:	2000      	movs	r0, #0
 80008c0:	f7ff fd4a 	bl	8000358 <LED_GREEN>
 80008c4:	e007      	b.n	80008d6 <SysTick_Handler+0x4e>
	else if (systick_cnt == 199)
 80008c6:	4b0d      	ldr	r3, [pc, #52]	; (80008fc <SysTick_Handler+0x74>)
 80008c8:	681b      	ldr	r3, [r3, #0]
 80008ca:	2bc7      	cmp	r3, #199	; 0xc7
 80008cc:	d103      	bne.n	80008d6 <SysTick_Handler+0x4e>
		systick_cnt = -1;
 80008ce:	4b0b      	ldr	r3, [pc, #44]	; (80008fc <SysTick_Handler+0x74>)
 80008d0:	f04f 32ff 	mov.w	r2, #4294967295
 80008d4:	601a      	str	r2, [r3, #0]
	systick_cnt ++;
 80008d6:	4b09      	ldr	r3, [pc, #36]	; (80008fc <SysTick_Handler+0x74>)
 80008d8:	681b      	ldr	r3, [r3, #0]
 80008da:	3301      	adds	r3, #1
 80008dc:	4a07      	ldr	r2, [pc, #28]	; (80008fc <SysTick_Handler+0x74>)
 80008de:	6013      	str	r3, [r2, #0]

	// Square Signal Management
	SQUARE_SIGNAL(systick_cnt % 2);
 80008e0:	4b06      	ldr	r3, [pc, #24]	; (80008fc <SysTick_Handler+0x74>)
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	f003 0301 	and.w	r3, r3, #1
 80008ea:	bfb8      	it	lt
 80008ec:	425b      	neglt	r3, r3
 80008ee:	4618      	mov	r0, r3
 80008f0:	f7ff fd48 	bl	8000384 <SQUARE_SIGNAL>
}
 80008f4:	bf00      	nop
 80008f6:	bd80      	pop	{r7, pc}
 80008f8:	20000024 	.word	0x20000024
 80008fc:	20000020 	.word	0x20000020
 8000900:	20000028 	.word	0x20000028

08000904 <main>:
void Calibration_Config();
void Systick_Config();



int main(void) {
 8000904:	b580      	push	{r7, lr}
 8000906:	af00      	add	r7, sp, #0
	/* Configure GPIOs */
	GPIO_init();
 8000908:	f7ff fcfc 	bl	8000304 <GPIO_init>

    /* Configure system clock */
    SystemClock_Config();
 800090c:	f000 f864 	bl	80009d8 <SystemClock_Config>

    /* Configure voltage scaling */
    VoltageScaling_Config();
 8000910:	f000 f91c 	bl	8000b4c <VoltageScaling_Config>

    /* Configure Systick timer (tick period at 10 ms) and activate interrupts */
    Systick_Config();
 8000914:	f000 f978 	bl	8000c08 <Systick_Config>

    /* Configure sleep modes*/
    SleepMode_Config();
 8000918:	f000 f930 	bl	8000b7c <SleepMode_Config>

    /* Configure calibration for expe [5..8]*/
    Calibration_Config();
 800091c:	f000 f968 	bl	8000bf0 <Calibration_Config>

    // Infinite Loop
    while (1) {
    	switch (expe) {
 8000920:	4b2b      	ldr	r3, [pc, #172]	; (80009d0 <main+0xcc>)
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	3b01      	subs	r3, #1
 8000926:	2b07      	cmp	r3, #7
 8000928:	d847      	bhi.n	80009ba <main+0xb6>
 800092a:	a201      	add	r2, pc, #4	; (adr r2, 8000930 <main+0x2c>)
 800092c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000930:	08000951 	.word	0x08000951
 8000934:	0800095d 	.word	0x0800095d
 8000938:	08000951 	.word	0x08000951
 800093c:	0800095d 	.word	0x0800095d
 8000940:	0800096b 	.word	0x0800096b
 8000944:	0800096b 	.word	0x0800096b
 8000948:	0800096b 	.word	0x0800096b
 800094c:	08000993 	.word	0x08000993
    	case 1: case 3:
    		if (blue_mode) __WFI();
 8000950:	4b20      	ldr	r3, [pc, #128]	; (80009d4 <main+0xd0>)
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	2b00      	cmp	r3, #0
 8000956:	d032      	beq.n	80009be <main+0xba>
 8000958:	bf30      	wfi
    		break;
 800095a:	e030      	b.n	80009be <main+0xba>

    	case 2: case 4:
    		if (blue_mode) LL_RCC_MSI_EnablePLLMode();
 800095c:	4b1d      	ldr	r3, [pc, #116]	; (80009d4 <main+0xd0>)
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	2b00      	cmp	r3, #0
 8000962:	d02e      	beq.n	80009c2 <main+0xbe>
 8000964:	f7ff fd98 	bl	8000498 <LL_RCC_MSI_EnablePLLMode>
    		break;
 8000968:	e02b      	b.n	80009c2 <main+0xbe>

    	case 5: case 6: case 7:
    		__WFI();
 800096a:	bf30      	wfi
    		if (blue_mode) {
 800096c:	4b19      	ldr	r3, [pc, #100]	; (80009d4 <main+0xd0>)
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	2b00      	cmp	r3, #0
 8000972:	d028      	beq.n	80009c6 <main+0xc2>
    			blue_mode = 0;
 8000974:	4b17      	ldr	r3, [pc, #92]	; (80009d4 <main+0xd0>)
 8000976:	2200      	movs	r2, #0
 8000978:	601a      	str	r2, [r3, #0]
    			LL_LPM_EnableDeepSleep();
 800097a:	f7ff ff75 	bl	8000868 <LL_LPM_EnableDeepSleep>
    			RTC_wakeup_init_from_stop(20);
 800097e:	2014      	movs	r0, #20
 8000980:	f000 fca1 	bl	80012c6 <RTC_wakeup_init_from_stop>
    			__WFI();
 8000984:	bf30      	wfi
    			LL_LPM_EnableSleep();
 8000986:	f7ff ff5f 	bl	8000848 <LL_LPM_EnableSleep>
    			blue_mode = 0;
 800098a:	4b12      	ldr	r3, [pc, #72]	; (80009d4 <main+0xd0>)
 800098c:	2200      	movs	r2, #0
 800098e:	601a      	str	r2, [r3, #0]
    		}
    		break;
 8000990:	e019      	b.n	80009c6 <main+0xc2>

    	case 8:
    		__WFI();
 8000992:	bf30      	wfi
    		if (blue_mode) {
 8000994:	4b0f      	ldr	r3, [pc, #60]	; (80009d4 <main+0xd0>)
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	2b00      	cmp	r3, #0
 800099a:	d016      	beq.n	80009ca <main+0xc6>
    			blue_mode = 0;
 800099c:	4b0d      	ldr	r3, [pc, #52]	; (80009d4 <main+0xd0>)
 800099e:	2200      	movs	r2, #0
 80009a0:	601a      	str	r2, [r3, #0]
    			LL_LPM_EnableDeepSleep();
 80009a2:	f7ff ff61 	bl	8000868 <LL_LPM_EnableDeepSleep>
    			RTC_wakeup_init_from_standby_or_shutdown(20);
 80009a6:	2014      	movs	r0, #20
 80009a8:	f000 fc80 	bl	80012ac <RTC_wakeup_init_from_standby_or_shutdown>
    			__WFI();
 80009ac:	bf30      	wfi
    			LL_LPM_EnableSleep();
 80009ae:	f7ff ff4b 	bl	8000848 <LL_LPM_EnableSleep>
    			blue_mode = 0;
 80009b2:	4b08      	ldr	r3, [pc, #32]	; (80009d4 <main+0xd0>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	601a      	str	r2, [r3, #0]
    		}
    		break;
 80009b8:	e007      	b.n	80009ca <main+0xc6>

    	default:
    		break;
 80009ba:	bf00      	nop
 80009bc:	e7b0      	b.n	8000920 <main+0x1c>
    		break;
 80009be:	bf00      	nop
 80009c0:	e7ae      	b.n	8000920 <main+0x1c>
    		break;
 80009c2:	bf00      	nop
 80009c4:	e7ac      	b.n	8000920 <main+0x1c>
    		break;
 80009c6:	bf00      	nop
 80009c8:	e7aa      	b.n	8000920 <main+0x1c>
    		break;
 80009ca:	bf00      	nop
    	switch (expe) {
 80009cc:	e7a8      	b.n	8000920 <main+0x1c>
 80009ce:	bf00      	nop
 80009d0:	20000028 	.word	0x20000028
 80009d4:	20000024 	.word	0x20000024

080009d8 <SystemClock_Config>:
  *            PLL_R                          = 2
  *            Flash Latency(WS)              = 4
  * @param  None
  * @retval None
  */
void SystemClock_Config() {
 80009d8:	b580      	push	{r7, lr}
 80009da:	af00      	add	r7, sp, #0
	if (LL_RCC_LSE_IsReady()) { // Démarrage à chaud
 80009dc:	f7ff fd26 	bl	800042c <LL_RCC_LSE_IsReady>
 80009e0:	4603      	mov	r3, r0
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d02c      	beq.n	8000a40 <SystemClock_Config+0x68>
		// Récupération de l'ancienne valeur de expe stockée dans le backup domain
		expe = LL_RTC_BAK_GetRegister(RTC, LL_RTC_BKP_DR0);
 80009e6:	2100      	movs	r1, #0
 80009e8:	4856      	ldr	r0, [pc, #344]	; (8000b44 <SystemClock_Config+0x16c>)
 80009ea:	f7ff fece 	bl	800078a <LL_RTC_BAK_GetRegister>
 80009ee:	4602      	mov	r2, r0
 80009f0:	4b55      	ldr	r3, [pc, #340]	; (8000b48 <SystemClock_Config+0x170>)
 80009f2:	601a      	str	r2, [r3, #0]

		LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 80009f4:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 80009f8:	f7ff fcee 	bl	80003d8 <LL_APB1_GRP1_EnableClock>
		LL_PWR_EnableBkUpAccess();
 80009fc:	f7ff fef0 	bl	80007e0 <LL_PWR_EnableBkUpAccess>

		// Check si le blue button est appuyé au moment du RESET
		if (BLUE_BUTTON()) {
 8000a00:	f7ff fcd8 	bl	80003b4 <BLUE_BUTTON>
 8000a04:	4603      	mov	r3, r0
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d03e      	beq.n	8000a88 <SystemClock_Config+0xb0>
			// Incrémentation de la valeur de expe (ou remise à 1 si expe max)
			if (expe == 8)
 8000a0a:	4b4f      	ldr	r3, [pc, #316]	; (8000b48 <SystemClock_Config+0x170>)
 8000a0c:	681b      	ldr	r3, [r3, #0]
 8000a0e:	2b08      	cmp	r3, #8
 8000a10:	d103      	bne.n	8000a1a <SystemClock_Config+0x42>
				expe = 1;
 8000a12:	4b4d      	ldr	r3, [pc, #308]	; (8000b48 <SystemClock_Config+0x170>)
 8000a14:	2201      	movs	r2, #1
 8000a16:	601a      	str	r2, [r3, #0]
 8000a18:	e004      	b.n	8000a24 <SystemClock_Config+0x4c>
			else
				expe ++;
 8000a1a:	4b4b      	ldr	r3, [pc, #300]	; (8000b48 <SystemClock_Config+0x170>)
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	3301      	adds	r3, #1
 8000a20:	4a49      	ldr	r2, [pc, #292]	; (8000b48 <SystemClock_Config+0x170>)
 8000a22:	6013      	str	r3, [r2, #0]

			// Sauvegarde la nouvelle valeur de expe dans le backup domain

			LL_RTC_BAK_SetRegister(RTC, LL_RTC_BKP_DR0, expe);
 8000a24:	4b48      	ldr	r3, [pc, #288]	; (8000b48 <SystemClock_Config+0x170>)
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	461a      	mov	r2, r3
 8000a2a:	2100      	movs	r1, #0
 8000a2c:	4845      	ldr	r0, [pc, #276]	; (8000b44 <SystemClock_Config+0x16c>)
 8000a2e:	f7ff fe93 	bl	8000758 <LL_RTC_BAK_SetRegister>

			// Attendre que le blue button soit relâché pour continuer
			while (BLUE_BUTTON()) {};
 8000a32:	bf00      	nop
 8000a34:	f7ff fcbe 	bl	80003b4 <BLUE_BUTTON>
 8000a38:	4603      	mov	r3, r0
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d1fa      	bne.n	8000a34 <SystemClock_Config+0x5c>
 8000a3e:	e023      	b.n	8000a88 <SystemClock_Config+0xb0>
		}
	}
	else { // Démarrage à froid
		// Activation du LSE
		LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 8000a40:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8000a44:	f7ff fcc8 	bl	80003d8 <LL_APB1_GRP1_EnableClock>
		LL_PWR_EnableBkUpAccess();
 8000a48:	f7ff feca 	bl	80007e0 <LL_PWR_EnableBkUpAccess>
		LL_RCC_ForceBackupDomainReset();
 8000a4c:	f7ff fdde 	bl	800060c <LL_RCC_ForceBackupDomainReset>
		LL_RCC_ReleaseBackupDomainReset();
 8000a50:	f7ff fdee 	bl	8000630 <LL_RCC_ReleaseBackupDomainReset>
		LL_RCC_LSE_Enable();
 8000a54:	f7ff fcd8 	bl	8000408 <LL_RCC_LSE_Enable>

		// Attendre que le LSE soit ready pour continuer
		while (!LL_RCC_LSE_IsReady()) {};
 8000a58:	bf00      	nop
 8000a5a:	f7ff fce7 	bl	800042c <LL_RCC_LSE_IsReady>
 8000a5e:	4603      	mov	r3, r0
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d0fa      	beq.n	8000a5a <SystemClock_Config+0x82>

		/* Configure RTC */
		LL_RCC_SetRTCClockSource(LL_RCC_RTC_CLKSOURCE_LSE);
 8000a64:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000a68:	f7ff fda8 	bl	80005bc <LL_RCC_SetRTCClockSource>
		LL_RCC_EnableRTC();
 8000a6c:	f7ff fdbc 	bl	80005e8 <LL_RCC_EnableRTC>
		RTC_Config();
 8000a70:	f000 fbbc 	bl	80011ec <RTC_Config>

		// Initialisation de la valeur de expe
		expe = 1;
 8000a74:	4b34      	ldr	r3, [pc, #208]	; (8000b48 <SystemClock_Config+0x170>)
 8000a76:	2201      	movs	r2, #1
 8000a78:	601a      	str	r2, [r3, #0]

		// Sauvegarde de la valeur de expe dans le backup domain
		LL_RTC_BAK_SetRegister(RTC, LL_RTC_BKP_DR0, expe);
 8000a7a:	4b33      	ldr	r3, [pc, #204]	; (8000b48 <SystemClock_Config+0x170>)
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	461a      	mov	r2, r3
 8000a80:	2100      	movs	r1, #0
 8000a82:	4830      	ldr	r0, [pc, #192]	; (8000b44 <SystemClock_Config+0x16c>)
 8000a84:	f7ff fe68 	bl	8000758 <LL_RTC_BAK_SetRegister>
	}

    /* MSI configuration and activation */
	if (expe == 1) { // MSI 4MHz  -  FLash Latency 4
 8000a88:	4b2f      	ldr	r3, [pc, #188]	; (8000b48 <SystemClock_Config+0x170>)
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	2b01      	cmp	r3, #1
 8000a8e:	d106      	bne.n	8000a9e <SystemClock_Config+0xc6>
		LL_FLASH_SetLatency(LL_FLASH_LATENCY_4);
 8000a90:	2004      	movs	r0, #4
 8000a92:	f7ff fe33 	bl	80006fc <LL_FLASH_SetLatency>
		LL_RCC_MSI_SetRange(LL_RCC_MSIRANGE_6);
 8000a96:	2060      	movs	r0, #96	; 0x60
 8000a98:	f7ff fd1e 	bl	80004d8 <LL_RCC_MSI_SetRange>
 8000a9c:	e010      	b.n	8000ac0 <SystemClock_Config+0xe8>
	}
	else if (expe == 2) { // MSI 24MHz  -  FLash Latency 1
 8000a9e:	4b2a      	ldr	r3, [pc, #168]	; (8000b48 <SystemClock_Config+0x170>)
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	2b02      	cmp	r3, #2
 8000aa4:	d106      	bne.n	8000ab4 <SystemClock_Config+0xdc>
		LL_FLASH_SetLatency(LL_FLASH_LATENCY_1);
 8000aa6:	2001      	movs	r0, #1
 8000aa8:	f7ff fe28 	bl	80006fc <LL_FLASH_SetLatency>
		LL_RCC_MSI_SetRange(LL_RCC_MSIRANGE_9);
 8000aac:	2090      	movs	r0, #144	; 0x90
 8000aae:	f7ff fd13 	bl	80004d8 <LL_RCC_MSI_SetRange>
 8000ab2:	e005      	b.n	8000ac0 <SystemClock_Config+0xe8>
	}
	else { // MSI 24MHz  -  FLash Latency 3
		LL_FLASH_SetLatency(LL_FLASH_LATENCY_3);
 8000ab4:	2003      	movs	r0, #3
 8000ab6:	f7ff fe21 	bl	80006fc <LL_FLASH_SetLatency>
		LL_RCC_MSI_SetRange(LL_RCC_MSIRANGE_9);
 8000aba:	2090      	movs	r0, #144	; 0x90
 8000abc:	f7ff fd0c 	bl	80004d8 <LL_RCC_MSI_SetRange>
	}

	// Configuration du MSI
	LL_RCC_MSI_EnableRangeSelection();
 8000ac0:	f7ff fcfa 	bl	80004b8 <LL_RCC_MSI_EnableRangeSelection>
    LL_RCC_MSI_Enable();
 8000ac4:	f7ff fcc6 	bl	8000454 <LL_RCC_MSI_Enable>
    while (LL_RCC_MSI_IsReady() != 1) {};
 8000ac8:	bf00      	nop
 8000aca:	f7ff fcd3 	bl	8000474 <LL_RCC_MSI_IsReady>
 8000ace:	4603      	mov	r3, r0
 8000ad0:	2b01      	cmp	r3, #1
 8000ad2:	d1fa      	bne.n	8000aca <SystemClock_Config+0xf2>

    if (expe == 1) {
 8000ad4:	4b1c      	ldr	r3, [pc, #112]	; (8000b48 <SystemClock_Config+0x170>)
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	2b01      	cmp	r3, #1
 8000ada:	d11c      	bne.n	8000b16 <SystemClock_Config+0x13e>
		/* Main PLL configuration and activation */
		LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_MSI, LL_RCC_PLLM_DIV_1, 40, LL_RCC_PLLR_DIV_2);
 8000adc:	2300      	movs	r3, #0
 8000ade:	2228      	movs	r2, #40	; 0x28
 8000ae0:	2100      	movs	r1, #0
 8000ae2:	2001      	movs	r0, #1
 8000ae4:	f7ff fdda 	bl	800069c <LL_RCC_PLL_ConfigDomain_SYS>
		LL_RCC_PLL_Enable();
 8000ae8:	f7ff fdb4 	bl	8000654 <LL_RCC_PLL_Enable>
		LL_RCC_PLL_EnableDomain_SYS();
 8000aec:	f7ff fdf6 	bl	80006dc <LL_RCC_PLL_EnableDomain_SYS>
		while(LL_RCC_PLL_IsReady() != 1) {};
 8000af0:	bf00      	nop
 8000af2:	f7ff fdbf 	bl	8000674 <LL_RCC_PLL_IsReady>
 8000af6:	4603      	mov	r3, r0
 8000af8:	2b01      	cmp	r3, #1
 8000afa:	d1fa      	bne.n	8000af2 <SystemClock_Config+0x11a>

		/* Sysclk activation on the main PLL */
		LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8000afc:	2000      	movs	r0, #0
 8000afe:	f7ff fd21 	bl	8000544 <LL_RCC_SetAHBPrescaler>
		LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 8000b02:	2003      	movs	r0, #3
 8000b04:	f7ff fcfc 	bl	8000500 <LL_RCC_SetSysClkSource>
		while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL) {};
 8000b08:	bf00      	nop
 8000b0a:	f7ff fd0d 	bl	8000528 <LL_RCC_GetSysClkSource>
 8000b0e:	4603      	mov	r3, r0
 8000b10:	2b0c      	cmp	r3, #12
 8000b12:	d1fa      	bne.n	8000b0a <SystemClock_Config+0x132>
 8000b14:	e00b      	b.n	8000b2e <SystemClock_Config+0x156>
    }
    else {
    	/* Sysclk activation on the main PLL */
    	LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8000b16:	2000      	movs	r0, #0
 8000b18:	f7ff fd14 	bl	8000544 <LL_RCC_SetAHBPrescaler>
    	LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_MSI);
 8000b1c:	2000      	movs	r0, #0
 8000b1e:	f7ff fcef 	bl	8000500 <LL_RCC_SetSysClkSource>
    	while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_MSI) {};
 8000b22:	bf00      	nop
 8000b24:	f7ff fd00 	bl	8000528 <LL_RCC_GetSysClkSource>
 8000b28:	4603      	mov	r3, r0
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d1fa      	bne.n	8000b24 <SystemClock_Config+0x14c>
    }

    /* Set APB1 & APB2 prescaler*/
    LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 8000b2e:	2000      	movs	r0, #0
 8000b30:	f7ff fd1c 	bl	800056c <LL_RCC_SetAPB1Prescaler>
    LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 8000b34:	2000      	movs	r0, #0
 8000b36:	f7ff fd2d 	bl	8000594 <LL_RCC_SetAPB2Prescaler>

    /* Update the global variable called SystemCoreClock */
    SystemCoreClockUpdate();
 8000b3a:	f000 f8d1 	bl	8000ce0 <SystemCoreClockUpdate>
}
 8000b3e:	bf00      	nop
 8000b40:	bd80      	pop	{r7, pc}
 8000b42:	bf00      	nop
 8000b44:	40002800 	.word	0x40002800
 8000b48:	20000028 	.word	0x20000028

08000b4c <VoltageScaling_Config>:

void VoltageScaling_Config() {
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	af00      	add	r7, sp, #0
	/* Configuration du voltage scaling selon expe */
	if (expe == 1 || expe == 2)
 8000b50:	4b09      	ldr	r3, [pc, #36]	; (8000b78 <VoltageScaling_Config+0x2c>)
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	2b01      	cmp	r3, #1
 8000b56:	d003      	beq.n	8000b60 <VoltageScaling_Config+0x14>
 8000b58:	4b07      	ldr	r3, [pc, #28]	; (8000b78 <VoltageScaling_Config+0x2c>)
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	2b02      	cmp	r3, #2
 8000b5e:	d104      	bne.n	8000b6a <VoltageScaling_Config+0x1e>
		LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE1);
 8000b60:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000b64:	f7ff fe28 	bl	80007b8 <LL_PWR_SetRegulVoltageScaling>
 8000b68:	e003      	b.n	8000b72 <VoltageScaling_Config+0x26>
	else
		LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE2);
 8000b6a:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8000b6e:	f7ff fe23 	bl	80007b8 <LL_PWR_SetRegulVoltageScaling>
}
 8000b72:	bf00      	nop
 8000b74:	bd80      	pop	{r7, pc}
 8000b76:	bf00      	nop
 8000b78:	20000028 	.word	0x20000028

08000b7c <SleepMode_Config>:

void SleepMode_Config() {
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	af00      	add	r7, sp, #0
	/* Configuration du sleep mode selon expe */
	switch (expe) {
 8000b80:	4b1a      	ldr	r3, [pc, #104]	; (8000bec <SleepMode_Config+0x70>)
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	3b01      	subs	r3, #1
 8000b86:	2b07      	cmp	r3, #7
 8000b88:	d82d      	bhi.n	8000be6 <SleepMode_Config+0x6a>
 8000b8a:	a201      	add	r2, pc, #4	; (adr r2, 8000b90 <SleepMode_Config+0x14>)
 8000b8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b90:	08000bb1 	.word	0x08000bb1
 8000b94:	08000be7 	.word	0x08000be7
 8000b98:	08000bb1 	.word	0x08000bb1
 8000b9c:	08000be7 	.word	0x08000be7
 8000ba0:	08000bb7 	.word	0x08000bb7
 8000ba4:	08000bc3 	.word	0x08000bc3
 8000ba8:	08000bcf 	.word	0x08000bcf
 8000bac:	08000bdb 	.word	0x08000bdb
	case 1:
	case 3:
		LL_LPM_EnableSleep();
 8000bb0:	f7ff fe4a 	bl	8000848 <LL_LPM_EnableSleep>
		break;
 8000bb4:	e018      	b.n	8000be8 <SleepMode_Config+0x6c>

	case 5:
		LL_LPM_EnableSleep();
 8000bb6:	f7ff fe47 	bl	8000848 <LL_LPM_EnableSleep>
		LL_PWR_SetPowerMode(LL_PWR_MODE_STOP0);
 8000bba:	2000      	movs	r0, #0
 8000bbc:	f7ff fe20 	bl	8000800 <LL_PWR_SetPowerMode>
		break;
 8000bc0:	e012      	b.n	8000be8 <SleepMode_Config+0x6c>

	case 6:
		LL_LPM_EnableSleep();
 8000bc2:	f7ff fe41 	bl	8000848 <LL_LPM_EnableSleep>
		LL_PWR_SetPowerMode(LL_PWR_MODE_STOP1);
 8000bc6:	2001      	movs	r0, #1
 8000bc8:	f7ff fe1a 	bl	8000800 <LL_PWR_SetPowerMode>
		break;
 8000bcc:	e00c      	b.n	8000be8 <SleepMode_Config+0x6c>

	case 7:
		LL_LPM_EnableSleep();
 8000bce:	f7ff fe3b 	bl	8000848 <LL_LPM_EnableSleep>
		LL_PWR_SetPowerMode(LL_PWR_MODE_STOP2);
 8000bd2:	2002      	movs	r0, #2
 8000bd4:	f7ff fe14 	bl	8000800 <LL_PWR_SetPowerMode>
		break;
 8000bd8:	e006      	b.n	8000be8 <SleepMode_Config+0x6c>

	case 8:
		LL_LPM_EnableSleep();
 8000bda:	f7ff fe35 	bl	8000848 <LL_LPM_EnableSleep>
		LL_PWR_SetPowerMode(LL_PWR_MODE_SHUTDOWN);
 8000bde:	2004      	movs	r0, #4
 8000be0:	f7ff fe0e 	bl	8000800 <LL_PWR_SetPowerMode>
		break;
 8000be4:	e000      	b.n	8000be8 <SleepMode_Config+0x6c>

	default:
		break;
 8000be6:	bf00      	nop
	}
}
 8000be8:	bf00      	nop
 8000bea:	bd80      	pop	{r7, pc}
 8000bec:	20000028 	.word	0x20000028

08000bf0 <Calibration_Config>:

void Calibration_Config() {
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	af00      	add	r7, sp, #0
	if (expe >= 5) LL_RCC_MSI_EnablePLLMode();
 8000bf4:	4b03      	ldr	r3, [pc, #12]	; (8000c04 <Calibration_Config+0x14>)
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	2b04      	cmp	r3, #4
 8000bfa:	d901      	bls.n	8000c00 <Calibration_Config+0x10>
 8000bfc:	f7ff fc4c 	bl	8000498 <LL_RCC_MSI_EnablePLLMode>
}
 8000c00:	bf00      	nop
 8000c02:	bd80      	pop	{r7, pc}
 8000c04:	20000028 	.word	0x20000028

08000c08 <Systick_Config>:

void Systick_Config() {
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	af00      	add	r7, sp, #0
	/* Configuration du Systick */
	LL_InitTick(SystemCoreClock, 100U);
 8000c0c:	4b04      	ldr	r3, [pc, #16]	; (8000c20 <Systick_Config+0x18>)
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	2164      	movs	r1, #100	; 0x64
 8000c12:	4618      	mov	r0, r3
 8000c14:	f7ff fd86 	bl	8000724 <LL_InitTick>
	LL_SYSTICK_EnableIT();
 8000c18:	f7ff fe06 	bl	8000828 <LL_SYSTICK_EnableIT>
}
 8000c1c:	bf00      	nop
 8000c1e:	bd80      	pop	{r7, pc}
 8000c20:	20000000 	.word	0x20000000

08000c24 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c24:	b480      	push	{r7}
 8000c26:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000c28:	bf00      	nop
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c30:	4770      	bx	lr

08000c32 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c32:	b480      	push	{r7}
 8000c34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c36:	e7fe      	b.n	8000c36 <HardFault_Handler+0x4>

08000c38 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c3c:	e7fe      	b.n	8000c3c <MemManage_Handler+0x4>

08000c3e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c3e:	b480      	push	{r7}
 8000c40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c42:	e7fe      	b.n	8000c42 <BusFault_Handler+0x4>

08000c44 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c44:	b480      	push	{r7}
 8000c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c48:	e7fe      	b.n	8000c48 <UsageFault_Handler+0x4>

08000c4a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c4a:	b480      	push	{r7}
 8000c4c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c4e:	bf00      	nop
 8000c50:	46bd      	mov	sp, r7
 8000c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c56:	4770      	bx	lr

08000c58 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c5c:	bf00      	nop
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c64:	4770      	bx	lr

08000c66 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c66:	b480      	push	{r7}
 8000c68:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c6a:	bf00      	nop
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c72:	4770      	bx	lr

08000c74 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000c74:	b480      	push	{r7}
 8000c76:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c78:	4b17      	ldr	r3, [pc, #92]	; (8000cd8 <SystemInit+0x64>)
 8000c7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c7e:	4a16      	ldr	r2, [pc, #88]	; (8000cd8 <SystemInit+0x64>)
 8000c80:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c84:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000c88:	4b14      	ldr	r3, [pc, #80]	; (8000cdc <SystemInit+0x68>)
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	4a13      	ldr	r2, [pc, #76]	; (8000cdc <SystemInit+0x68>)
 8000c8e:	f043 0301 	orr.w	r3, r3, #1
 8000c92:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000c94:	4b11      	ldr	r3, [pc, #68]	; (8000cdc <SystemInit+0x68>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000c9a:	4b10      	ldr	r3, [pc, #64]	; (8000cdc <SystemInit+0x68>)
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	4a0f      	ldr	r2, [pc, #60]	; (8000cdc <SystemInit+0x68>)
 8000ca0:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000ca4:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000ca8:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000caa:	4b0c      	ldr	r3, [pc, #48]	; (8000cdc <SystemInit+0x68>)
 8000cac:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000cb0:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000cb2:	4b0a      	ldr	r3, [pc, #40]	; (8000cdc <SystemInit+0x68>)
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	4a09      	ldr	r2, [pc, #36]	; (8000cdc <SystemInit+0x68>)
 8000cb8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000cbc:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000cbe:	4b07      	ldr	r3, [pc, #28]	; (8000cdc <SystemInit+0x68>)
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000cc4:	4b04      	ldr	r3, [pc, #16]	; (8000cd8 <SystemInit+0x64>)
 8000cc6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000cca:	609a      	str	r2, [r3, #8]
#endif
}
 8000ccc:	bf00      	nop
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop
 8000cd8:	e000ed00 	.word	0xe000ed00
 8000cdc:	40021000 	.word	0x40021000

08000ce0 <SystemCoreClockUpdate>:
  *
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	b087      	sub	sp, #28
 8000ce4:	af00      	add	r7, sp, #0
  uint32_t tmp = 0U, msirange = 0U, pllvco = 0U, pllr = 2U, pllsource = 0U, pllm = 2U;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	60fb      	str	r3, [r7, #12]
 8000cea:	2300      	movs	r3, #0
 8000cec:	617b      	str	r3, [r7, #20]
 8000cee:	2300      	movs	r3, #0
 8000cf0:	613b      	str	r3, [r7, #16]
 8000cf2:	2302      	movs	r3, #2
 8000cf4:	60bb      	str	r3, [r7, #8]
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	607b      	str	r3, [r7, #4]
 8000cfa:	2302      	movs	r3, #2
 8000cfc:	603b      	str	r3, [r7, #0]

  /* Get MSI Range frequency--------------------------------------------------*/
  if((RCC->CR & RCC_CR_MSIRGSEL) == RESET)
 8000cfe:	4b4f      	ldr	r3, [pc, #316]	; (8000e3c <SystemCoreClockUpdate+0x15c>)
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	f003 0308 	and.w	r3, r3, #8
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d107      	bne.n	8000d1a <SystemCoreClockUpdate+0x3a>
  { /* MSISRANGE from RCC_CSR applies */
    msirange = (RCC->CSR & RCC_CSR_MSISRANGE) >> 8U;
 8000d0a:	4b4c      	ldr	r3, [pc, #304]	; (8000e3c <SystemCoreClockUpdate+0x15c>)
 8000d0c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000d10:	0a1b      	lsrs	r3, r3, #8
 8000d12:	f003 030f 	and.w	r3, r3, #15
 8000d16:	617b      	str	r3, [r7, #20]
 8000d18:	e005      	b.n	8000d26 <SystemCoreClockUpdate+0x46>
  }
  else
  { /* MSIRANGE from RCC_CR applies */
    msirange = (RCC->CR & RCC_CR_MSIRANGE) >> 4U;
 8000d1a:	4b48      	ldr	r3, [pc, #288]	; (8000e3c <SystemCoreClockUpdate+0x15c>)
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	091b      	lsrs	r3, r3, #4
 8000d20:	f003 030f 	and.w	r3, r3, #15
 8000d24:	617b      	str	r3, [r7, #20]
  }
  /*MSI frequency range in HZ*/
  msirange = MSIRangeTable[msirange];
 8000d26:	4a46      	ldr	r2, [pc, #280]	; (8000e40 <SystemCoreClockUpdate+0x160>)
 8000d28:	697b      	ldr	r3, [r7, #20]
 8000d2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d2e:	617b      	str	r3, [r7, #20]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000d30:	4b42      	ldr	r3, [pc, #264]	; (8000e3c <SystemCoreClockUpdate+0x15c>)
 8000d32:	689b      	ldr	r3, [r3, #8]
 8000d34:	f003 030c 	and.w	r3, r3, #12
 8000d38:	2b0c      	cmp	r3, #12
 8000d3a:	d865      	bhi.n	8000e08 <SystemCoreClockUpdate+0x128>
 8000d3c:	a201      	add	r2, pc, #4	; (adr r2, 8000d44 <SystemCoreClockUpdate+0x64>)
 8000d3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d42:	bf00      	nop
 8000d44:	08000d79 	.word	0x08000d79
 8000d48:	08000e09 	.word	0x08000e09
 8000d4c:	08000e09 	.word	0x08000e09
 8000d50:	08000e09 	.word	0x08000e09
 8000d54:	08000d81 	.word	0x08000d81
 8000d58:	08000e09 	.word	0x08000e09
 8000d5c:	08000e09 	.word	0x08000e09
 8000d60:	08000e09 	.word	0x08000e09
 8000d64:	08000d89 	.word	0x08000d89
 8000d68:	08000e09 	.word	0x08000e09
 8000d6c:	08000e09 	.word	0x08000e09
 8000d70:	08000e09 	.word	0x08000e09
 8000d74:	08000d91 	.word	0x08000d91
  {
    case 0x00:  /* MSI used as system clock source */
      SystemCoreClock = msirange;
 8000d78:	4a32      	ldr	r2, [pc, #200]	; (8000e44 <SystemCoreClockUpdate+0x164>)
 8000d7a:	697b      	ldr	r3, [r7, #20]
 8000d7c:	6013      	str	r3, [r2, #0]
      break;
 8000d7e:	e047      	b.n	8000e10 <SystemCoreClockUpdate+0x130>

    case 0x04:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 8000d80:	4b30      	ldr	r3, [pc, #192]	; (8000e44 <SystemCoreClockUpdate+0x164>)
 8000d82:	4a31      	ldr	r2, [pc, #196]	; (8000e48 <SystemCoreClockUpdate+0x168>)
 8000d84:	601a      	str	r2, [r3, #0]
      break;
 8000d86:	e043      	b.n	8000e10 <SystemCoreClockUpdate+0x130>

    case 0x08:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 8000d88:	4b2e      	ldr	r3, [pc, #184]	; (8000e44 <SystemCoreClockUpdate+0x164>)
 8000d8a:	4a30      	ldr	r2, [pc, #192]	; (8000e4c <SystemCoreClockUpdate+0x16c>)
 8000d8c:	601a      	str	r2, [r3, #0]
      break;
 8000d8e:	e03f      	b.n	8000e10 <SystemCoreClockUpdate+0x130>

    case 0x0C:  /* PLL used as system clock  source */
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLR
         */
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8000d90:	4b2a      	ldr	r3, [pc, #168]	; (8000e3c <SystemCoreClockUpdate+0x15c>)
 8000d92:	68db      	ldr	r3, [r3, #12]
 8000d94:	f003 0303 	and.w	r3, r3, #3
 8000d98:	607b      	str	r3, [r7, #4]
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> 4U) + 1U ;
 8000d9a:	4b28      	ldr	r3, [pc, #160]	; (8000e3c <SystemCoreClockUpdate+0x15c>)
 8000d9c:	68db      	ldr	r3, [r3, #12]
 8000d9e:	091b      	lsrs	r3, r3, #4
 8000da0:	f003 0307 	and.w	r3, r3, #7
 8000da4:	3301      	adds	r3, #1
 8000da6:	603b      	str	r3, [r7, #0]

      switch (pllsource)
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	2b02      	cmp	r3, #2
 8000dac:	d002      	beq.n	8000db4 <SystemCoreClockUpdate+0xd4>
 8000dae:	2b03      	cmp	r3, #3
 8000db0:	d006      	beq.n	8000dc0 <SystemCoreClockUpdate+0xe0>
 8000db2:	e00b      	b.n	8000dcc <SystemCoreClockUpdate+0xec>
      {
        case 0x02:  /* HSI used as PLL clock source */
          pllvco = (HSI_VALUE / pllm);
 8000db4:	4a24      	ldr	r2, [pc, #144]	; (8000e48 <SystemCoreClockUpdate+0x168>)
 8000db6:	683b      	ldr	r3, [r7, #0]
 8000db8:	fbb2 f3f3 	udiv	r3, r2, r3
 8000dbc:	613b      	str	r3, [r7, #16]
          break;
 8000dbe:	e00b      	b.n	8000dd8 <SystemCoreClockUpdate+0xf8>

        case 0x03:  /* HSE used as PLL clock source */
          pllvco = (HSE_VALUE / pllm);
 8000dc0:	4a22      	ldr	r2, [pc, #136]	; (8000e4c <SystemCoreClockUpdate+0x16c>)
 8000dc2:	683b      	ldr	r3, [r7, #0]
 8000dc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8000dc8:	613b      	str	r3, [r7, #16]
          break;
 8000dca:	e005      	b.n	8000dd8 <SystemCoreClockUpdate+0xf8>

        default:    /* MSI used as PLL clock source */
          pllvco = (msirange / pllm);
 8000dcc:	697a      	ldr	r2, [r7, #20]
 8000dce:	683b      	ldr	r3, [r7, #0]
 8000dd0:	fbb2 f3f3 	udiv	r3, r2, r3
 8000dd4:	613b      	str	r3, [r7, #16]
          break;
 8000dd6:	bf00      	nop
      }
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 8U);
 8000dd8:	4b18      	ldr	r3, [pc, #96]	; (8000e3c <SystemCoreClockUpdate+0x15c>)
 8000dda:	68db      	ldr	r3, [r3, #12]
 8000ddc:	0a1b      	lsrs	r3, r3, #8
 8000dde:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8000de2:	693b      	ldr	r3, [r7, #16]
 8000de4:	fb02 f303 	mul.w	r3, r2, r3
 8000de8:	613b      	str	r3, [r7, #16]
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 25U) + 1U) * 2U;
 8000dea:	4b14      	ldr	r3, [pc, #80]	; (8000e3c <SystemCoreClockUpdate+0x15c>)
 8000dec:	68db      	ldr	r3, [r3, #12]
 8000dee:	0e5b      	lsrs	r3, r3, #25
 8000df0:	f003 0303 	and.w	r3, r3, #3
 8000df4:	3301      	adds	r3, #1
 8000df6:	005b      	lsls	r3, r3, #1
 8000df8:	60bb      	str	r3, [r7, #8]
      SystemCoreClock = pllvco/pllr;
 8000dfa:	693a      	ldr	r2, [r7, #16]
 8000dfc:	68bb      	ldr	r3, [r7, #8]
 8000dfe:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e02:	4a10      	ldr	r2, [pc, #64]	; (8000e44 <SystemCoreClockUpdate+0x164>)
 8000e04:	6013      	str	r3, [r2, #0]
      break;
 8000e06:	e003      	b.n	8000e10 <SystemCoreClockUpdate+0x130>

    default:
      SystemCoreClock = msirange;
 8000e08:	4a0e      	ldr	r2, [pc, #56]	; (8000e44 <SystemCoreClockUpdate+0x164>)
 8000e0a:	697b      	ldr	r3, [r7, #20]
 8000e0c:	6013      	str	r3, [r2, #0]
      break;
 8000e0e:	bf00      	nop
  }
  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4U)];
 8000e10:	4b0a      	ldr	r3, [pc, #40]	; (8000e3c <SystemCoreClockUpdate+0x15c>)
 8000e12:	689b      	ldr	r3, [r3, #8]
 8000e14:	091b      	lsrs	r3, r3, #4
 8000e16:	f003 030f 	and.w	r3, r3, #15
 8000e1a:	4a0d      	ldr	r2, [pc, #52]	; (8000e50 <SystemCoreClockUpdate+0x170>)
 8000e1c:	5cd3      	ldrb	r3, [r2, r3]
 8000e1e:	60fb      	str	r3, [r7, #12]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
 8000e20:	4b08      	ldr	r3, [pc, #32]	; (8000e44 <SystemCoreClockUpdate+0x164>)
 8000e22:	681a      	ldr	r2, [r3, #0]
 8000e24:	68fb      	ldr	r3, [r7, #12]
 8000e26:	fa22 f303 	lsr.w	r3, r2, r3
 8000e2a:	4a06      	ldr	r2, [pc, #24]	; (8000e44 <SystemCoreClockUpdate+0x164>)
 8000e2c:	6013      	str	r3, [r2, #0]
}
 8000e2e:	bf00      	nop
 8000e30:	371c      	adds	r7, #28
 8000e32:	46bd      	mov	sp, r7
 8000e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e38:	4770      	bx	lr
 8000e3a:	bf00      	nop
 8000e3c:	40021000 	.word	0x40021000
 8000e40:	080013d0 	.word	0x080013d0
 8000e44:	20000000 	.word	0x20000000
 8000e48:	00f42400 	.word	0x00f42400
 8000e4c:	007a1200 	.word	0x007a1200
 8000e50:	080013c0 	.word	0x080013c0

08000e54 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e54:	b480      	push	{r7}
 8000e56:	b083      	sub	sp, #12
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	db0b      	blt.n	8000e7e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e66:	79fb      	ldrb	r3, [r7, #7]
 8000e68:	f003 021f 	and.w	r2, r3, #31
 8000e6c:	4907      	ldr	r1, [pc, #28]	; (8000e8c <__NVIC_EnableIRQ+0x38>)
 8000e6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e72:	095b      	lsrs	r3, r3, #5
 8000e74:	2001      	movs	r0, #1
 8000e76:	fa00 f202 	lsl.w	r2, r0, r2
 8000e7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000e7e:	bf00      	nop
 8000e80:	370c      	adds	r7, #12
 8000e82:	46bd      	mov	sp, r7
 8000e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e88:	4770      	bx	lr
 8000e8a:	bf00      	nop
 8000e8c:	e000e100 	.word	0xe000e100

08000e90 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e90:	b480      	push	{r7}
 8000e92:	b083      	sub	sp, #12
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	4603      	mov	r3, r0
 8000e98:	6039      	str	r1, [r7, #0]
 8000e9a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	db0a      	blt.n	8000eba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ea4:	683b      	ldr	r3, [r7, #0]
 8000ea6:	b2da      	uxtb	r2, r3
 8000ea8:	490c      	ldr	r1, [pc, #48]	; (8000edc <__NVIC_SetPriority+0x4c>)
 8000eaa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eae:	0112      	lsls	r2, r2, #4
 8000eb0:	b2d2      	uxtb	r2, r2
 8000eb2:	440b      	add	r3, r1
 8000eb4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000eb8:	e00a      	b.n	8000ed0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000eba:	683b      	ldr	r3, [r7, #0]
 8000ebc:	b2da      	uxtb	r2, r3
 8000ebe:	4908      	ldr	r1, [pc, #32]	; (8000ee0 <__NVIC_SetPriority+0x50>)
 8000ec0:	79fb      	ldrb	r3, [r7, #7]
 8000ec2:	f003 030f 	and.w	r3, r3, #15
 8000ec6:	3b04      	subs	r3, #4
 8000ec8:	0112      	lsls	r2, r2, #4
 8000eca:	b2d2      	uxtb	r2, r2
 8000ecc:	440b      	add	r3, r1
 8000ece:	761a      	strb	r2, [r3, #24]
}
 8000ed0:	bf00      	nop
 8000ed2:	370c      	adds	r7, #12
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eda:	4770      	bx	lr
 8000edc:	e000e100 	.word	0xe000e100
 8000ee0:	e000ed00 	.word	0xe000ed00

08000ee4 <LL_RTC_EnableInitMode>:
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	b083      	sub	sp, #12
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->ISR, RTC_LL_INIT_MASK);
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	f04f 32ff 	mov.w	r2, #4294967295
 8000ef2:	60da      	str	r2, [r3, #12]
}
 8000ef4:	bf00      	nop
 8000ef6:	370c      	adds	r7, #12
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efe:	4770      	bx	lr

08000f00 <LL_RTC_DisableInitMode>:
{
 8000f00:	b480      	push	{r7}
 8000f02:	b083      	sub	sp, #12
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->ISR, (uint32_t)~RTC_ISR_INIT);
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8000f0e:	60da      	str	r2, [r3, #12]
}
 8000f10:	bf00      	nop
 8000f12:	370c      	adds	r7, #12
 8000f14:	46bd      	mov	sp, r7
 8000f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1a:	4770      	bx	lr

08000f1c <LL_RTC_SetAsynchPrescaler>:
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	b083      	sub	sp, #12
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
 8000f24:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->PRER, RTC_PRER_PREDIV_A, AsynchPrescaler << RTC_PRER_PREDIV_A_Pos);
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	691b      	ldr	r3, [r3, #16]
 8000f2a:	f423 02fe 	bic.w	r2, r3, #8323072	; 0x7f0000
 8000f2e:	683b      	ldr	r3, [r7, #0]
 8000f30:	041b      	lsls	r3, r3, #16
 8000f32:	431a      	orrs	r2, r3
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	611a      	str	r2, [r3, #16]
}
 8000f38:	bf00      	nop
 8000f3a:	370c      	adds	r7, #12
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f42:	4770      	bx	lr

08000f44 <LL_RTC_SetSynchPrescaler>:
{
 8000f44:	b480      	push	{r7}
 8000f46:	b083      	sub	sp, #12
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
 8000f4c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->PRER, RTC_PRER_PREDIV_S, SynchPrescaler);
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	691b      	ldr	r3, [r3, #16]
 8000f52:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8000f56:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8000f5a:	683a      	ldr	r2, [r7, #0]
 8000f5c:	431a      	orrs	r2, r3
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	611a      	str	r2, [r3, #16]
}
 8000f62:	bf00      	nop
 8000f64:	370c      	adds	r7, #12
 8000f66:	46bd      	mov	sp, r7
 8000f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6c:	4770      	bx	lr

08000f6e <LL_RTC_EnableWriteProtection>:
{
 8000f6e:	b480      	push	{r7}
 8000f70:	b083      	sub	sp, #12
 8000f72:	af00      	add	r7, sp, #0
 8000f74:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	22ff      	movs	r2, #255	; 0xff
 8000f7a:	625a      	str	r2, [r3, #36]	; 0x24
}
 8000f7c:	bf00      	nop
 8000f7e:	370c      	adds	r7, #12
 8000f80:	46bd      	mov	sp, r7
 8000f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f86:	4770      	bx	lr

08000f88 <LL_RTC_DisableWriteProtection>:
{
 8000f88:	b480      	push	{r7}
 8000f8a:	b083      	sub	sp, #12
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	22ca      	movs	r2, #202	; 0xca
 8000f94:	625a      	str	r2, [r3, #36]	; 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	2253      	movs	r2, #83	; 0x53
 8000f9a:	625a      	str	r2, [r3, #36]	; 0x24
}
 8000f9c:	bf00      	nop
 8000f9e:	370c      	adds	r7, #12
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa6:	4770      	bx	lr

08000fa8 <LL_RTC_TIME_Config>:
{
 8000fa8:	b480      	push	{r7}
 8000faa:	b087      	sub	sp, #28
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	60f8      	str	r0, [r7, #12]
 8000fb0:	60b9      	str	r1, [r7, #8]
 8000fb2:	607a      	str	r2, [r7, #4]
 8000fb4:	603b      	str	r3, [r7, #0]
  uint32_t temp = 0U;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	617b      	str	r3, [r7, #20]
         (((Hours & 0xF0U) << (RTC_TR_HT_Pos - 4U)) | ((Hours & 0x0FU) << RTC_TR_HU_Pos))     | \
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	041b      	lsls	r3, r3, #16
 8000fbe:	f403 027f 	and.w	r2, r3, #16711680	; 0xff0000
  temp = Format12_24                                                                                    | \
 8000fc2:	68bb      	ldr	r3, [r7, #8]
 8000fc4:	431a      	orrs	r2, r3
         (((Minutes & 0xF0U) << (RTC_TR_MNT_Pos - 4U)) | ((Minutes & 0x0FU) << RTC_TR_MNU_Pos)) | \
 8000fc6:	683b      	ldr	r3, [r7, #0]
 8000fc8:	021b      	lsls	r3, r3, #8
 8000fca:	b29b      	uxth	r3, r3
         (((Hours & 0xF0U) << (RTC_TR_HT_Pos - 4U)) | ((Hours & 0x0FU) << RTC_TR_HU_Pos))     | \
 8000fcc:	431a      	orrs	r2, r3
         (((Seconds & 0xF0U) << (RTC_TR_ST_Pos - 4U)) | ((Seconds & 0x0FU) << RTC_TR_SU_Pos));
 8000fce:	6a3b      	ldr	r3, [r7, #32]
 8000fd0:	b2db      	uxtb	r3, r3
  temp = Format12_24                                                                                    | \
 8000fd2:	4313      	orrs	r3, r2
 8000fd4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(RTCx->TR, (RTC_TR_PM | RTC_TR_HT | RTC_TR_HU | RTC_TR_MNT | RTC_TR_MNU | RTC_TR_ST | RTC_TR_SU), temp);
 8000fd6:	68fb      	ldr	r3, [r7, #12]
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	f023 137f 	bic.w	r3, r3, #8323199	; 0x7f007f
 8000fde:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8000fe2:	697a      	ldr	r2, [r7, #20]
 8000fe4:	431a      	orrs	r2, r3
 8000fe6:	68fb      	ldr	r3, [r7, #12]
 8000fe8:	601a      	str	r2, [r3, #0]
}
 8000fea:	bf00      	nop
 8000fec:	371c      	adds	r7, #28
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff4:	4770      	bx	lr
	...

08000ff8 <LL_RTC_DATE_Config>:
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	b087      	sub	sp, #28
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	60f8      	str	r0, [r7, #12]
 8001000:	60b9      	str	r1, [r7, #8]
 8001002:	607a      	str	r2, [r7, #4]
 8001004:	603b      	str	r3, [r7, #0]
  uint32_t temp = 0U;
 8001006:	2300      	movs	r3, #0
 8001008:	617b      	str	r3, [r7, #20]
  temp = (WeekDay << RTC_DR_WDU_Pos)                                                        | \
 800100a:	68bb      	ldr	r3, [r7, #8]
 800100c:	035a      	lsls	r2, r3, #13
         (((Year & 0xF0U) << (RTC_DR_YT_Pos - 4U)) | ((Year & 0x0FU) << RTC_DR_YU_Pos))   | \
 800100e:	6a3b      	ldr	r3, [r7, #32]
 8001010:	041b      	lsls	r3, r3, #16
 8001012:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  temp = (WeekDay << RTC_DR_WDU_Pos)                                                        | \
 8001016:	431a      	orrs	r2, r3
         (((Month & 0xF0U) << (RTC_DR_MT_Pos - 4U)) | ((Month & 0x0FU) << RTC_DR_MU_Pos)) | \
 8001018:	683b      	ldr	r3, [r7, #0]
 800101a:	021b      	lsls	r3, r3, #8
 800101c:	b29b      	uxth	r3, r3
         (((Year & 0xF0U) << (RTC_DR_YT_Pos - 4U)) | ((Year & 0x0FU) << RTC_DR_YU_Pos))   | \
 800101e:	431a      	orrs	r2, r3
         (((Day & 0xF0U) << (RTC_DR_DT_Pos - 4U)) | ((Day & 0x0FU) << RTC_DR_DU_Pos));
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	b2db      	uxtb	r3, r3
  temp = (WeekDay << RTC_DR_WDU_Pos)                                                        | \
 8001024:	4313      	orrs	r3, r2
 8001026:	617b      	str	r3, [r7, #20]
  MODIFY_REG(RTCx->DR, (RTC_DR_WDU | RTC_DR_MT | RTC_DR_MU | RTC_DR_DT | RTC_DR_DU | RTC_DR_YT | RTC_DR_YU), temp);
 8001028:	68fb      	ldr	r3, [r7, #12]
 800102a:	685a      	ldr	r2, [r3, #4]
 800102c:	4b05      	ldr	r3, [pc, #20]	; (8001044 <LL_RTC_DATE_Config+0x4c>)
 800102e:	4013      	ands	r3, r2
 8001030:	697a      	ldr	r2, [r7, #20]
 8001032:	431a      	orrs	r2, r3
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	605a      	str	r2, [r3, #4]
}
 8001038:	bf00      	nop
 800103a:	371c      	adds	r7, #28
 800103c:	46bd      	mov	sp, r7
 800103e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001042:	4770      	bx	lr
 8001044:	ff0000c0 	.word	0xff0000c0

08001048 <LL_RTC_WAKEUP_Enable>:
{
 8001048:	b480      	push	{r7}
 800104a:	b083      	sub	sp, #12
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
  SET_BIT(RTCx->CR, RTC_CR_WUTE);
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	689b      	ldr	r3, [r3, #8]
 8001054:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	609a      	str	r2, [r3, #8]
}
 800105c:	bf00      	nop
 800105e:	370c      	adds	r7, #12
 8001060:	46bd      	mov	sp, r7
 8001062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001066:	4770      	bx	lr

08001068 <LL_RTC_WAKEUP_Disable>:
{
 8001068:	b480      	push	{r7}
 800106a:	b083      	sub	sp, #12
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RTCx->CR, RTC_CR_WUTE);
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	689b      	ldr	r3, [r3, #8]
 8001074:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	609a      	str	r2, [r3, #8]
}
 800107c:	bf00      	nop
 800107e:	370c      	adds	r7, #12
 8001080:	46bd      	mov	sp, r7
 8001082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001086:	4770      	bx	lr

08001088 <LL_RTC_WAKEUP_SetClock>:
{
 8001088:	b480      	push	{r7}
 800108a:	b083      	sub	sp, #12
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
 8001090:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->CR, RTC_CR_WUCKSEL, WakeupClock);
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	689b      	ldr	r3, [r3, #8]
 8001096:	f023 0207 	bic.w	r2, r3, #7
 800109a:	683b      	ldr	r3, [r7, #0]
 800109c:	431a      	orrs	r2, r3
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	609a      	str	r2, [r3, #8]
}
 80010a2:	bf00      	nop
 80010a4:	370c      	adds	r7, #12
 80010a6:	46bd      	mov	sp, r7
 80010a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ac:	4770      	bx	lr

080010ae <LL_RTC_WAKEUP_SetAutoReload>:
{
 80010ae:	b480      	push	{r7}
 80010b0:	b083      	sub	sp, #12
 80010b2:	af00      	add	r7, sp, #0
 80010b4:	6078      	str	r0, [r7, #4]
 80010b6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->WUTR, RTC_WUTR_WUT, Value);
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	695b      	ldr	r3, [r3, #20]
 80010bc:	0c1b      	lsrs	r3, r3, #16
 80010be:	041b      	lsls	r3, r3, #16
 80010c0:	683a      	ldr	r2, [r7, #0]
 80010c2:	431a      	orrs	r2, r3
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	615a      	str	r2, [r3, #20]
}
 80010c8:	bf00      	nop
 80010ca:	370c      	adds	r7, #12
 80010cc:	46bd      	mov	sp, r7
 80010ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d2:	4770      	bx	lr

080010d4 <LL_RTC_ClearFlag_WUT>:
  * @rmtoll ISR          WUTF          LL_RTC_ClearFlag_WUT
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_ClearFlag_WUT(RTC_TypeDef *RTCx)
{
 80010d4:	b480      	push	{r7}
 80010d6:	b083      	sub	sp, #12
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->ISR, (~((RTC_ISR_WUTF | RTC_ISR_INIT) & 0x0000FFFFU) | (RTCx->ISR & RTC_ISR_INIT)));
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	68db      	ldr	r3, [r3, #12]
 80010e0:	b2db      	uxtb	r3, r3
 80010e2:	f463 6290 	orn	r2, r3, #1152	; 0x480
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	60da      	str	r2, [r3, #12]
}
 80010ea:	bf00      	nop
 80010ec:	370c      	adds	r7, #12
 80010ee:	46bd      	mov	sp, r7
 80010f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f4:	4770      	bx	lr

080010f6 <LL_RTC_IsActiveFlag_INIT>:
  * @rmtoll ISR          INITF         LL_RTC_IsActiveFlag_INIT
  * @param  RTCx RTC Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RTC_IsActiveFlag_INIT(RTC_TypeDef *RTCx)
{
 80010f6:	b480      	push	{r7}
 80010f8:	b083      	sub	sp, #12
 80010fa:	af00      	add	r7, sp, #0
 80010fc:	6078      	str	r0, [r7, #4]
  return (READ_BIT(RTCx->ISR, RTC_ISR_INITF) == (RTC_ISR_INITF));
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	68db      	ldr	r3, [r3, #12]
 8001102:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001106:	2b40      	cmp	r3, #64	; 0x40
 8001108:	bf0c      	ite	eq
 800110a:	2301      	moveq	r3, #1
 800110c:	2300      	movne	r3, #0
 800110e:	b2db      	uxtb	r3, r3
}
 8001110:	4618      	mov	r0, r3
 8001112:	370c      	adds	r7, #12
 8001114:	46bd      	mov	sp, r7
 8001116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111a:	4770      	bx	lr

0800111c <LL_RTC_IsActiveFlag_WUTW>:
  * @rmtoll ISR          WUTWF         LL_RTC_IsActiveFlag_WUTW
  * @param  RTCx RTC Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RTC_IsActiveFlag_WUTW(RTC_TypeDef *RTCx)
{
 800111c:	b480      	push	{r7}
 800111e:	b083      	sub	sp, #12
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
  return (READ_BIT(RTCx->ISR, RTC_ISR_WUTWF) == (RTC_ISR_WUTWF));
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	68db      	ldr	r3, [r3, #12]
 8001128:	f003 0304 	and.w	r3, r3, #4
 800112c:	2b04      	cmp	r3, #4
 800112e:	bf0c      	ite	eq
 8001130:	2301      	moveq	r3, #1
 8001132:	2300      	movne	r3, #0
 8001134:	b2db      	uxtb	r3, r3
}
 8001136:	4618      	mov	r0, r3
 8001138:	370c      	adds	r7, #12
 800113a:	46bd      	mov	sp, r7
 800113c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001140:	4770      	bx	lr

08001142 <LL_RTC_EnableIT_WUT>:
  * @rmtoll RTC_CR          WUTIE         LL_RTC_EnableIT_WUT
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_EnableIT_WUT(RTC_TypeDef *RTCx)
{
 8001142:	b480      	push	{r7}
 8001144:	b083      	sub	sp, #12
 8001146:	af00      	add	r7, sp, #0
 8001148:	6078      	str	r0, [r7, #4]
  SET_BIT(RTCx->CR, RTC_CR_WUTIE);
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	689b      	ldr	r3, [r3, #8]
 800114e:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	609a      	str	r2, [r3, #8]
}
 8001156:	bf00      	nop
 8001158:	370c      	adds	r7, #12
 800115a:	46bd      	mov	sp, r7
 800115c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001160:	4770      	bx	lr
	...

08001164 <LL_EXTI_EnableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 8001164:	b480      	push	{r7}
 8001166:	b083      	sub	sp, #12
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 800116c:	4b05      	ldr	r3, [pc, #20]	; (8001184 <LL_EXTI_EnableIT_0_31+0x20>)
 800116e:	681a      	ldr	r2, [r3, #0]
 8001170:	4904      	ldr	r1, [pc, #16]	; (8001184 <LL_EXTI_EnableIT_0_31+0x20>)
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	4313      	orrs	r3, r2
 8001176:	600b      	str	r3, [r1, #0]
}
 8001178:	bf00      	nop
 800117a:	370c      	adds	r7, #12
 800117c:	46bd      	mov	sp, r7
 800117e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001182:	4770      	bx	lr
 8001184:	40010400 	.word	0x40010400

08001188 <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8001188:	b480      	push	{r7}
 800118a:	b083      	sub	sp, #12
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8001190:	4b05      	ldr	r3, [pc, #20]	; (80011a8 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8001192:	689a      	ldr	r2, [r3, #8]
 8001194:	4904      	ldr	r1, [pc, #16]	; (80011a8 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	4313      	orrs	r3, r2
 800119a:	608b      	str	r3, [r1, #8]

}
 800119c:	bf00      	nop
 800119e:	370c      	adds	r7, #12
 80011a0:	46bd      	mov	sp, r7
 80011a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a6:	4770      	bx	lr
 80011a8:	40010400 	.word	0x40010400

080011ac <LL_EXTI_ClearFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 80011ac:	b480      	push	{r7}
 80011ae:	b083      	sub	sp, #12
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR1, ExtiLine);
 80011b4:	4a04      	ldr	r2, [pc, #16]	; (80011c8 <LL_EXTI_ClearFlag_0_31+0x1c>)
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	6153      	str	r3, [r2, #20]
}
 80011ba:	bf00      	nop
 80011bc:	370c      	adds	r7, #12
 80011be:	46bd      	mov	sp, r7
 80011c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c4:	4770      	bx	lr
 80011c6:	bf00      	nop
 80011c8:	40010400 	.word	0x40010400

080011cc <LL_PWR_EnableInternWU>:
  * @brief  Enable Internal Wake-up line
  * @rmtoll CR3          EIWF          LL_PWR_EnableInternWU
  * @retval None
  */
__STATIC_INLINE void LL_PWR_EnableInternWU(void)
{
 80011cc:	b480      	push	{r7}
 80011ce:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR3, PWR_CR3_EIWF);
 80011d0:	4b05      	ldr	r3, [pc, #20]	; (80011e8 <LL_PWR_EnableInternWU+0x1c>)
 80011d2:	689b      	ldr	r3, [r3, #8]
 80011d4:	4a04      	ldr	r2, [pc, #16]	; (80011e8 <LL_PWR_EnableInternWU+0x1c>)
 80011d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80011da:	6093      	str	r3, [r2, #8]
}
 80011dc:	bf00      	nop
 80011de:	46bd      	mov	sp, r7
 80011e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e4:	4770      	bx	lr
 80011e6:	bf00      	nop
 80011e8:	40007000 	.word	0x40007000

080011ec <RTC_Config>:
#include "wakeup.h"


void RTC_Config() {
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b082      	sub	sp, #8
 80011f0:	af02      	add	r7, sp, #8
	LL_RTC_DisableWriteProtection(RTC);
 80011f2:	4817      	ldr	r0, [pc, #92]	; (8001250 <RTC_Config+0x64>)
 80011f4:	f7ff fec8 	bl	8000f88 <LL_RTC_DisableWriteProtection>
	LL_RTC_EnableInitMode(RTC);
 80011f8:	4815      	ldr	r0, [pc, #84]	; (8001250 <RTC_Config+0x64>)
 80011fa:	f7ff fe73 	bl	8000ee4 <LL_RTC_EnableInitMode>

	while (!LL_RTC_IsActiveFlag_INIT(RTC)) {};
 80011fe:	bf00      	nop
 8001200:	4813      	ldr	r0, [pc, #76]	; (8001250 <RTC_Config+0x64>)
 8001202:	f7ff ff78 	bl	80010f6 <LL_RTC_IsActiveFlag_INIT>
 8001206:	4603      	mov	r3, r0
 8001208:	2b00      	cmp	r3, #0
 800120a:	d0f9      	beq.n	8001200 <RTC_Config+0x14>

	LL_RTC_SetAsynchPrescaler(RTC, 127);
 800120c:	217f      	movs	r1, #127	; 0x7f
 800120e:	4810      	ldr	r0, [pc, #64]	; (8001250 <RTC_Config+0x64>)
 8001210:	f7ff fe84 	bl	8000f1c <LL_RTC_SetAsynchPrescaler>
	LL_RTC_SetSynchPrescaler(RTC, 255);
 8001214:	21ff      	movs	r1, #255	; 0xff
 8001216:	480e      	ldr	r0, [pc, #56]	; (8001250 <RTC_Config+0x64>)
 8001218:	f7ff fe94 	bl	8000f44 <LL_RTC_SetSynchPrescaler>

	LL_RTC_TIME_Config(RTC, LL_RTC_TIME_FORMAT_AM_OR_24, 12, 0, 0);
 800121c:	2300      	movs	r3, #0
 800121e:	9300      	str	r3, [sp, #0]
 8001220:	2300      	movs	r3, #0
 8001222:	220c      	movs	r2, #12
 8001224:	2100      	movs	r1, #0
 8001226:	480a      	ldr	r0, [pc, #40]	; (8001250 <RTC_Config+0x64>)
 8001228:	f7ff febe 	bl	8000fa8 <LL_RTC_TIME_Config>
	LL_RTC_DATE_Config(RTC, LL_RTC_WEEKDAY_TUESDAY, 17, LL_RTC_MONTH_NOVEMBER, 2020);
 800122c:	f240 73e4 	movw	r3, #2020	; 0x7e4
 8001230:	9300      	str	r3, [sp, #0]
 8001232:	2311      	movs	r3, #17
 8001234:	2211      	movs	r2, #17
 8001236:	2102      	movs	r1, #2
 8001238:	4805      	ldr	r0, [pc, #20]	; (8001250 <RTC_Config+0x64>)
 800123a:	f7ff fedd 	bl	8000ff8 <LL_RTC_DATE_Config>

	LL_RTC_DisableInitMode(RTC);
 800123e:	4804      	ldr	r0, [pc, #16]	; (8001250 <RTC_Config+0x64>)
 8001240:	f7ff fe5e 	bl	8000f00 <LL_RTC_DisableInitMode>
	LL_RTC_EnableWriteProtection(RTC);
 8001244:	4802      	ldr	r0, [pc, #8]	; (8001250 <RTC_Config+0x64>)
 8001246:	f7ff fe92 	bl	8000f6e <LL_RTC_EnableWriteProtection>
}
 800124a:	bf00      	nop
 800124c:	46bd      	mov	sp, r7
 800124e:	bd80      	pop	{r7, pc}
 8001250:	40002800 	.word	0x40002800

08001254 <RTC_wakeup_init>:

// partie commune a toutes les utilisations du wakeup timer
static void RTC_wakeup_init(int delay) {
 8001254:	b580      	push	{r7, lr}
 8001256:	b082      	sub	sp, #8
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
	LL_RTC_DisableWriteProtection(RTC);
 800125c:	4812      	ldr	r0, [pc, #72]	; (80012a8 <RTC_wakeup_init+0x54>)
 800125e:	f7ff fe93 	bl	8000f88 <LL_RTC_DisableWriteProtection>
	LL_RTC_WAKEUP_Disable(RTC);
 8001262:	4811      	ldr	r0, [pc, #68]	; (80012a8 <RTC_wakeup_init+0x54>)
 8001264:	f7ff ff00 	bl	8001068 <LL_RTC_WAKEUP_Disable>
	while (!LL_RTC_IsActiveFlag_WUTW(RTC)) {};
 8001268:	bf00      	nop
 800126a:	480f      	ldr	r0, [pc, #60]	; (80012a8 <RTC_wakeup_init+0x54>)
 800126c:	f7ff ff56 	bl	800111c <LL_RTC_IsActiveFlag_WUTW>
 8001270:	4603      	mov	r3, r0
 8001272:	2b00      	cmp	r3, #0
 8001274:	d0f9      	beq.n	800126a <RTC_wakeup_init+0x16>

	// connecter le timer a l'horloge 1Hz de la RTC
	LL_RTC_WAKEUP_SetClock(RTC, LL_RTC_WAKEUPCLOCK_CKSPRE);
 8001276:	2104      	movs	r1, #4
 8001278:	480b      	ldr	r0, [pc, #44]	; (80012a8 <RTC_wakeup_init+0x54>)
 800127a:	f7ff ff05 	bl	8001088 <LL_RTC_WAKEUP_SetClock>

	// fixer la duree de temporisation
	LL_RTC_WAKEUP_SetAutoReload(RTC, delay);	// 16 bits
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	4619      	mov	r1, r3
 8001282:	4809      	ldr	r0, [pc, #36]	; (80012a8 <RTC_wakeup_init+0x54>)
 8001284:	f7ff ff13 	bl	80010ae <LL_RTC_WAKEUP_SetAutoReload>
	LL_RTC_ClearFlag_WUT(RTC);
 8001288:	4807      	ldr	r0, [pc, #28]	; (80012a8 <RTC_wakeup_init+0x54>)
 800128a:	f7ff ff23 	bl	80010d4 <LL_RTC_ClearFlag_WUT>
	LL_RTC_EnableIT_WUT(RTC);
 800128e:	4806      	ldr	r0, [pc, #24]	; (80012a8 <RTC_wakeup_init+0x54>)
 8001290:	f7ff ff57 	bl	8001142 <LL_RTC_EnableIT_WUT>
	LL_RTC_WAKEUP_Enable(RTC);
 8001294:	4804      	ldr	r0, [pc, #16]	; (80012a8 <RTC_wakeup_init+0x54>)
 8001296:	f7ff fed7 	bl	8001048 <LL_RTC_WAKEUP_Enable>
	LL_RTC_EnableWriteProtection(RTC);
 800129a:	4803      	ldr	r0, [pc, #12]	; (80012a8 <RTC_wakeup_init+0x54>)
 800129c:	f7ff fe67 	bl	8000f6e <LL_RTC_EnableWriteProtection>
}
 80012a0:	bf00      	nop
 80012a2:	3708      	adds	r7, #8
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bd80      	pop	{r7, pc}
 80012a8:	40002800 	.word	0x40002800

080012ac <RTC_wakeup_init_from_standby_or_shutdown>:

// Dans le cas des modes STANDBY et SHUTDOWN, le MPU sera reveille par reset
// causé par 1 wakeup line (interne ou externe) (le NVIC n'est plus alimenté)
void RTC_wakeup_init_from_standby_or_shutdown(int delay) {
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b082      	sub	sp, #8
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
	RTC_wakeup_init(delay);
 80012b4:	6878      	ldr	r0, [r7, #4]
 80012b6:	f7ff ffcd 	bl	8001254 <RTC_wakeup_init>

	// enable the Internal Wake-up line
	LL_PWR_EnableInternWU();	// ceci ne concerne que Standby et Shutdown, pas STOPx
 80012ba:	f7ff ff87 	bl	80011cc <LL_PWR_EnableInternWU>
}
 80012be:	bf00      	nop
 80012c0:	3708      	adds	r7, #8
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd80      	pop	{r7, pc}

080012c6 <RTC_wakeup_init_from_stop>:

// Dans le cas des modes STOPx, le MPU sera reveille par interruption
// le module EXTI et une partie du NVIC sont encore alimentes
// le contenu de la RAM et des registres étant préservé, le MPU
// reprend l'execution après l'instruction WFI
void RTC_wakeup_init_from_stop(int delay) {
 80012c6:	b580      	push	{r7, lr}
 80012c8:	b082      	sub	sp, #8
 80012ca:	af00      	add	r7, sp, #0
 80012cc:	6078      	str	r0, [r7, #4]
	RTC_wakeup_init(delay);
 80012ce:	6878      	ldr	r0, [r7, #4]
 80012d0:	f7ff ffc0 	bl	8001254 <RTC_wakeup_init>

	// valider l'interrupt par la ligne 20 du module EXTI, qui est réservée au wakeup timer
	LL_EXTI_EnableIT_0_31(LL_EXTI_LINE_20);
 80012d4:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80012d8:	f7ff ff44 	bl	8001164 <LL_EXTI_EnableIT_0_31>
	LL_EXTI_EnableRisingTrig_0_31(LL_EXTI_LINE_20);
 80012dc:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80012e0:	f7ff ff52 	bl	8001188 <LL_EXTI_EnableRisingTrig_0_31>

	// valider l'interrupt chez NVIC
	NVIC_SetPriority(RTC_WKUP_IRQn, 1);
 80012e4:	2101      	movs	r1, #1
 80012e6:	2003      	movs	r0, #3
 80012e8:	f7ff fdd2 	bl	8000e90 <__NVIC_SetPriority>
	NVIC_EnableIRQ(RTC_WKUP_IRQn);
 80012ec:	2003      	movs	r0, #3
 80012ee:	f7ff fdb1 	bl	8000e54 <__NVIC_EnableIRQ>
}
 80012f2:	bf00      	nop
 80012f4:	3708      	adds	r7, #8
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bd80      	pop	{r7, pc}

080012fa <RTC_WKUP_IRQHandler>:

// wakeup timer interrupt Handler (inutile mais doit etre defini)
void RTC_WKUP_IRQHandler() {
 80012fa:	b580      	push	{r7, lr}
 80012fc:	af00      	add	r7, sp, #0
	LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_20);
 80012fe:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8001302:	f7ff ff53 	bl	80011ac <LL_EXTI_ClearFlag_0_31>
}
 8001306:	bf00      	nop
 8001308:	bd80      	pop	{r7, pc}
	...

0800130c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800130c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001344 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001310:	f7ff fcb0 	bl	8000c74 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001314:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001316:	e003      	b.n	8001320 <LoopCopyDataInit>

08001318 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001318:	4b0b      	ldr	r3, [pc, #44]	; (8001348 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800131a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 800131c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800131e:	3104      	adds	r1, #4

08001320 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001320:	480a      	ldr	r0, [pc, #40]	; (800134c <LoopForever+0xa>)
	ldr	r3, =_edata
 8001322:	4b0b      	ldr	r3, [pc, #44]	; (8001350 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001324:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001326:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001328:	d3f6      	bcc.n	8001318 <CopyDataInit>
	ldr	r2, =_sbss
 800132a:	4a0a      	ldr	r2, [pc, #40]	; (8001354 <LoopForever+0x12>)
	b	LoopFillZerobss
 800132c:	e002      	b.n	8001334 <LoopFillZerobss>

0800132e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800132e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001330:	f842 3b04 	str.w	r3, [r2], #4

08001334 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001334:	4b08      	ldr	r3, [pc, #32]	; (8001358 <LoopForever+0x16>)
	cmp	r2, r3
 8001336:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001338:	d3f9      	bcc.n	800132e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800133a:	f000 f811 	bl	8001360 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800133e:	f7ff fae1 	bl	8000904 <main>

08001342 <LoopForever>:

LoopForever:
    b LoopForever
 8001342:	e7fe      	b.n	8001342 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001344:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8001348:	08001408 	.word	0x08001408
	ldr	r0, =_sdata
 800134c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001350:	20000004 	.word	0x20000004
	ldr	r2, =_sbss
 8001354:	20000004 	.word	0x20000004
	ldr	r3, = _ebss
 8001358:	2000002c 	.word	0x2000002c

0800135c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800135c:	e7fe      	b.n	800135c <ADC1_2_IRQHandler>
	...

08001360 <__libc_init_array>:
 8001360:	b570      	push	{r4, r5, r6, lr}
 8001362:	4e0d      	ldr	r6, [pc, #52]	; (8001398 <__libc_init_array+0x38>)
 8001364:	4c0d      	ldr	r4, [pc, #52]	; (800139c <__libc_init_array+0x3c>)
 8001366:	1ba4      	subs	r4, r4, r6
 8001368:	10a4      	asrs	r4, r4, #2
 800136a:	2500      	movs	r5, #0
 800136c:	42a5      	cmp	r5, r4
 800136e:	d109      	bne.n	8001384 <__libc_init_array+0x24>
 8001370:	4e0b      	ldr	r6, [pc, #44]	; (80013a0 <__libc_init_array+0x40>)
 8001372:	4c0c      	ldr	r4, [pc, #48]	; (80013a4 <__libc_init_array+0x44>)
 8001374:	f000 f818 	bl	80013a8 <_init>
 8001378:	1ba4      	subs	r4, r4, r6
 800137a:	10a4      	asrs	r4, r4, #2
 800137c:	2500      	movs	r5, #0
 800137e:	42a5      	cmp	r5, r4
 8001380:	d105      	bne.n	800138e <__libc_init_array+0x2e>
 8001382:	bd70      	pop	{r4, r5, r6, pc}
 8001384:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001388:	4798      	blx	r3
 800138a:	3501      	adds	r5, #1
 800138c:	e7ee      	b.n	800136c <__libc_init_array+0xc>
 800138e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001392:	4798      	blx	r3
 8001394:	3501      	adds	r5, #1
 8001396:	e7f2      	b.n	800137e <__libc_init_array+0x1e>
 8001398:	08001400 	.word	0x08001400
 800139c:	08001400 	.word	0x08001400
 80013a0:	08001400 	.word	0x08001400
 80013a4:	08001404 	.word	0x08001404

080013a8 <_init>:
 80013a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80013aa:	bf00      	nop
 80013ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80013ae:	bc08      	pop	{r3}
 80013b0:	469e      	mov	lr, r3
 80013b2:	4770      	bx	lr

080013b4 <_fini>:
 80013b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80013b6:	bf00      	nop
 80013b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80013ba:	bc08      	pop	{r3}
 80013bc:	469e      	mov	lr, r3
 80013be:	4770      	bx	lr
